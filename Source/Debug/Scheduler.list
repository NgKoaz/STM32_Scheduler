
Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000303c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003148  08003148  00013148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003174  08003174  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003174  08003174  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003174  08003174  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003174  08003174  00013174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003178  08003178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800317c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c0  2000000c  08003188  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011cc  08003188  000211cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d409  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000209b  00000000  00000000  0002d43e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  0002f4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  00030270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017331  00000000  00000000  00030f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f14e  00000000  00000000  00048259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089051  00000000  00000000  000573a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e03f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003778  00000000  00000000  000e0448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003130 	.word	0x08003130

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003130 	.word	0x08003130

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fe3f 	bl	8000dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configur	e the system clock */
  SystemClock_Config();
 8000156:	f000 f86b 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f937 	bl	80003cc <MX_GPIO_Init>
  MX_TIM2_Init();
 800015e:	f000 f8bf 	bl	80002e0 <MX_TIM2_Init>
  MX_IWDG_Init();
 8000162:	f000 f8a3 	bl	80002ac <MX_IWDG_Init>
  MX_USART1_UART_Init();
 8000166:	f000 f907 	bl	8000378 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800016a:	4829      	ldr	r0, [pc, #164]	; (8000210 <main+0xc4>)
 800016c:	f001 feea 	bl	8001f44 <HAL_TIM_Base_Start_IT>

  SCH_Init();
 8000170:	f000 fa88 	bl	8000684 <SCH_Init>

  HAL_GPIO_WritePin(GPIOA, LED0_Pin, 1);
 8000174:	2201      	movs	r2, #1
 8000176:	2102      	movs	r1, #2
 8000178:	4826      	ldr	r0, [pc, #152]	; (8000214 <main+0xc8>)
 800017a:	f001 f9e5 	bl	8001548 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED1_Pin, 1);
 800017e:	2201      	movs	r2, #1
 8000180:	2104      	movs	r1, #4
 8000182:	4824      	ldr	r0, [pc, #144]	; (8000214 <main+0xc8>)
 8000184:	f001 f9e0 	bl	8001548 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED2_Pin, 1);
 8000188:	2201      	movs	r2, #1
 800018a:	2108      	movs	r1, #8
 800018c:	4821      	ldr	r0, [pc, #132]	; (8000214 <main+0xc8>)
 800018e:	f001 f9db 	bl	8001548 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED3_Pin, 1);
 8000192:	2201      	movs	r2, #1
 8000194:	2110      	movs	r1, #16
 8000196:	481f      	ldr	r0, [pc, #124]	; (8000214 <main+0xc8>)
 8000198:	f001 f9d6 	bl	8001548 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED4_Pin, 1);
 800019c:	2201      	movs	r2, #1
 800019e:	2120      	movs	r1, #32
 80001a0:	481c      	ldr	r0, [pc, #112]	; (8000214 <main+0xc8>)
 80001a2:	f001 f9d1 	bl	8001548 <HAL_GPIO_WritePin>

  uint8_t task1 = SCH_Add_Task(Blinking_LED0, 0, 500);
 80001a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001aa:	2100      	movs	r1, #0
 80001ac:	481a      	ldr	r0, [pc, #104]	; (8000218 <main+0xcc>)
 80001ae:	f000 fa75 	bl	800069c <SCH_Add_Task>
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
  uint8_t task2 = SCH_Add_Task(Blinking_LED1, 10, 1000);
 80001b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001ba:	210a      	movs	r1, #10
 80001bc:	4817      	ldr	r0, [pc, #92]	; (800021c <main+0xd0>)
 80001be:	f000 fa6d 	bl	800069c <SCH_Add_Task>
 80001c2:	4603      	mov	r3, r0
 80001c4:	71bb      	strb	r3, [r7, #6]
  uint8_t task3 = SCH_Add_Task(Blinking_LED2, 10, 1500);
 80001c6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80001ca:	210a      	movs	r1, #10
 80001cc:	4814      	ldr	r0, [pc, #80]	; (8000220 <main+0xd4>)
 80001ce:	f000 fa65 	bl	800069c <SCH_Add_Task>
 80001d2:	4603      	mov	r3, r0
 80001d4:	717b      	strb	r3, [r7, #5]
  uint8_t task4 = SCH_Add_Task(Blinking_LED3, 20, 2000);
 80001d6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80001da:	2114      	movs	r1, #20
 80001dc:	4811      	ldr	r0, [pc, #68]	; (8000224 <main+0xd8>)
 80001de:	f000 fa5d 	bl	800069c <SCH_Add_Task>
 80001e2:	4603      	mov	r3, r0
 80001e4:	713b      	strb	r3, [r7, #4]
  uint8_t task5 = SCH_Add_Task(Blinking_LED4, 20, 2500);
 80001e6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80001ea:	2114      	movs	r1, #20
 80001ec:	480e      	ldr	r0, [pc, #56]	; (8000228 <main+0xdc>)
 80001ee:	f000 fa55 	bl	800069c <SCH_Add_Task>
 80001f2:	4603      	mov	r3, r0
 80001f4:	70fb      	strb	r3, [r7, #3]
//  SCH_Delete_Task(task3);
  SCH_Delete_Task(task5);
 80001f6:	78fb      	ldrb	r3, [r7, #3]
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 fa66 	bl	80006ca <SCH_Delete_Task>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
//	  Blinking_LED0();
	  isTaskJustRun = SCH_Dispatch_Task();
 80001fe:	f000 fa5d 	bl	80006bc <SCH_Dispatch_Task>
 8000202:	4603      	mov	r3, r0
 8000204:	461a      	mov	r2, r3
 8000206:	4b09      	ldr	r3, [pc, #36]	; (800022c <main+0xe0>)
 8000208:	701a      	strb	r2, [r3, #0]

	  //Print timestamp when some task ran.
//	  UART_Report_Timestamp();

	  //Go to sleep if no task need to run
	  SCH_Sleep();
 800020a:	f000 fa6c 	bl	80006e6 <SCH_Sleep>
	  isTaskJustRun = SCH_Dispatch_Task();
 800020e:	e7f6      	b.n	80001fe <main+0xb2>
 8000210:	20000034 	.word	0x20000034
 8000214:	40010800 	.word	0x40010800
 8000218:	0800045d 	.word	0x0800045d
 800021c:	08000471 	.word	0x08000471
 8000220:	08000485 	.word	0x08000485
 8000224:	08000499 	.word	0x08000499
 8000228:	080004ad 	.word	0x080004ad
 800022c:	200000c8 	.word	0x200000c8

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b090      	sub	sp, #64	; 0x40
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0318 	add.w	r3, r7, #24
 800023a:	2228      	movs	r2, #40	; 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f002 ff6e 	bl	8003120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
 8000250:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000252:	230a      	movs	r3, #10
 8000254:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000256:	2301      	movs	r3, #1
 8000258:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025a:	2310      	movs	r3, #16
 800025c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800025e:	2301      	movs	r3, #1
 8000260:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000262:	2300      	movs	r3, #0
 8000264:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000266:	f107 0318 	add.w	r3, r7, #24
 800026a:	4618      	mov	r0, r3
 800026c:	f001 fa0a 	bl	8001684 <HAL_RCC_OscConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8000276:	f000 f923 	bl	80004c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027a:	230f      	movs	r3, #15
 800027c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800027e:	2300      	movs	r3, #0
 8000280:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f001 fc78 	bl	8001b88 <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800029e:	f000 f90f 	bl	80004c0 <Error_Handler>
  }
}
 80002a2:	bf00      	nop
 80002a4:	3740      	adds	r7, #64	; 0x40
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80002b0:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <MX_IWDG_Init+0x2c>)
 80002b2:	4a0a      	ldr	r2, [pc, #40]	; (80002dc <MX_IWDG_Init+0x30>)
 80002b4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80002b6:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <MX_IWDG_Init+0x2c>)
 80002b8:	2203      	movs	r2, #3
 80002ba:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 63;
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <MX_IWDG_Init+0x2c>)
 80002be:	223f      	movs	r2, #63	; 0x3f
 80002c0:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80002c2:	4805      	ldr	r0, [pc, #20]	; (80002d8 <MX_IWDG_Init+0x2c>)
 80002c4:	f001 f971 	bl	80015aa <HAL_IWDG_Init>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <MX_IWDG_Init+0x26>
  {
    Error_Handler();
 80002ce:	f000 f8f7 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	20000028 	.word	0x20000028
 80002dc:	40003000 	.word	0x40003000

080002e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b086      	sub	sp, #24
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002e6:	f107 0308 	add.w	r3, r7, #8
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f4:	463b      	mov	r3, r7
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002fc:	4b1d      	ldr	r3, [pc, #116]	; (8000374 <MX_TIM2_Init+0x94>)
 80002fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000302:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000304:	4b1b      	ldr	r3, [pc, #108]	; (8000374 <MX_TIM2_Init+0x94>)
 8000306:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800030a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800030c:	4b19      	ldr	r3, [pc, #100]	; (8000374 <MX_TIM2_Init+0x94>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000312:	4b18      	ldr	r3, [pc, #96]	; (8000374 <MX_TIM2_Init+0x94>)
 8000314:	2209      	movs	r2, #9
 8000316:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000318:	4b16      	ldr	r3, [pc, #88]	; (8000374 <MX_TIM2_Init+0x94>)
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800031e:	4b15      	ldr	r3, [pc, #84]	; (8000374 <MX_TIM2_Init+0x94>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000324:	4813      	ldr	r0, [pc, #76]	; (8000374 <MX_TIM2_Init+0x94>)
 8000326:	f001 fdbd 	bl	8001ea4 <HAL_TIM_Base_Init>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000330:	f000 f8c6 	bl	80004c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000338:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800033a:	f107 0308 	add.w	r3, r7, #8
 800033e:	4619      	mov	r1, r3
 8000340:	480c      	ldr	r0, [pc, #48]	; (8000374 <MX_TIM2_Init+0x94>)
 8000342:	f001 ff53 	bl	80021ec <HAL_TIM_ConfigClockSource>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800034c:	f000 f8b8 	bl	80004c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000350:	2300      	movs	r3, #0
 8000352:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000354:	2300      	movs	r3, #0
 8000356:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000358:	463b      	mov	r3, r7
 800035a:	4619      	mov	r1, r3
 800035c:	4805      	ldr	r0, [pc, #20]	; (8000374 <MX_TIM2_Init+0x94>)
 800035e:	f002 f91f 	bl	80025a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000368:	f000 f8aa 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800036c:	bf00      	nop
 800036e:	3718      	adds	r7, #24
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000034 	.word	0x20000034

08000378 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800037c:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 800037e:	4a12      	ldr	r2, [pc, #72]	; (80003c8 <MX_USART1_UART_Init+0x50>)
 8000380:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000382:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 8000384:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000388:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000390:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 8000392:	2200      	movs	r2, #0
 8000394:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000396:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 8000398:	2200      	movs	r2, #0
 800039a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800039c:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 800039e:	220c      	movs	r2, #12
 80003a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003a2:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ae:	4805      	ldr	r0, [pc, #20]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 80003b0:	f002 f960 	bl	8002674 <HAL_UART_Init>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003ba:	f000 f881 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	2000007c 	.word	0x2000007c
 80003c8:	40013800 	.word	0x40013800

080003cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d2:	f107 0308 	add.w	r3, r7, #8
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e0:	4b11      	ldr	r3, [pc, #68]	; (8000428 <MX_GPIO_Init+0x5c>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a10      	ldr	r2, [pc, #64]	; (8000428 <MX_GPIO_Init+0x5c>)
 80003e6:	f043 0304 	orr.w	r3, r3, #4
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <MX_GPIO_Init+0x5c>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0304 	and.w	r3, r3, #4
 80003f4:	607b      	str	r3, [r7, #4]
 80003f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 80003f8:	2200      	movs	r2, #0
 80003fa:	213e      	movs	r1, #62	; 0x3e
 80003fc:	480b      	ldr	r0, [pc, #44]	; (800042c <MX_GPIO_Init+0x60>)
 80003fe:	f001 f8a3 	bl	8001548 <HAL_GPIO_WritePin>
                          |LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin
                           LED4_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8000402:	233e      	movs	r3, #62	; 0x3e
 8000404:	60bb      	str	r3, [r7, #8]
                          |LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000406:	2301      	movs	r3, #1
 8000408:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040e:	2302      	movs	r3, #2
 8000410:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000412:	f107 0308 	add.w	r3, r7, #8
 8000416:	4619      	mov	r1, r3
 8000418:	4804      	ldr	r0, [pc, #16]	; (800042c <MX_GPIO_Init+0x60>)
 800041a:	f000 ff19 	bl	8001250 <HAL_GPIO_Init>

}
 800041e:	bf00      	nop
 8000420:	3718      	adds	r7, #24
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000
 800042c:	40010800 	.word	0x40010800

08000430 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000438:	f000 f92a 	bl	8000690 <SCH_Update>
	timestamp++;
 800043c:	4b05      	ldr	r3, [pc, #20]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	3301      	adds	r3, #1
 8000442:	4a04      	ldr	r2, [pc, #16]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000444:	6013      	str	r3, [r2, #0]
	HAL_IWDG_Refresh(&hiwdg);
 8000446:	4804      	ldr	r0, [pc, #16]	; (8000458 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000448:	f001 f8f1 	bl	800162e <HAL_IWDG_Refresh>
}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	200000c4 	.word	0x200000c4
 8000458:	20000028 	.word	0x20000028

0800045c <Blinking_LED0>:
void Blinking_LED0(void){
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED0_Pin);
 8000460:	2102      	movs	r1, #2
 8000462:	4802      	ldr	r0, [pc, #8]	; (800046c <Blinking_LED0+0x10>)
 8000464:	f001 f888 	bl	8001578 <HAL_GPIO_TogglePin>
}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40010800 	.word	0x40010800

08000470 <Blinking_LED1>:
void Blinking_LED1(void){
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 8000474:	2104      	movs	r1, #4
 8000476:	4802      	ldr	r0, [pc, #8]	; (8000480 <Blinking_LED1+0x10>)
 8000478:	f001 f87e 	bl	8001578 <HAL_GPIO_TogglePin>
}
 800047c:	bf00      	nop
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40010800 	.word	0x40010800

08000484 <Blinking_LED2>:
void Blinking_LED2(void){
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED2_Pin);
 8000488:	2108      	movs	r1, #8
 800048a:	4802      	ldr	r0, [pc, #8]	; (8000494 <Blinking_LED2+0x10>)
 800048c:	f001 f874 	bl	8001578 <HAL_GPIO_TogglePin>
}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40010800 	.word	0x40010800

08000498 <Blinking_LED3>:
void Blinking_LED3(void){
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED3_Pin);
 800049c:	2110      	movs	r1, #16
 800049e:	4802      	ldr	r0, [pc, #8]	; (80004a8 <Blinking_LED3+0x10>)
 80004a0:	f001 f86a 	bl	8001578 <HAL_GPIO_TogglePin>
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40010800 	.word	0x40010800

080004ac <Blinking_LED4>:
void Blinking_LED4(void){
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED4_Pin);
 80004b0:	2120      	movs	r1, #32
 80004b2:	4802      	ldr	r0, [pc, #8]	; (80004bc <Blinking_LED4+0x10>)
 80004b4:	f001 f860 	bl	8001578 <HAL_GPIO_TogglePin>
}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40010800 	.word	0x40010800

080004c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c4:	b672      	cpsid	i
}
 80004c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <Error_Handler+0x8>
	...

080004cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <HAL_MspInit+0x40>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	4a0d      	ldr	r2, [pc, #52]	; (800050c <HAL_MspInit+0x40>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6193      	str	r3, [r2, #24]
 80004de:	4b0b      	ldr	r3, [pc, #44]	; (800050c <HAL_MspInit+0x40>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <HAL_MspInit+0x40>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <HAL_MspInit+0x40>)
 80004f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f4:	61d3      	str	r3, [r2, #28]
 80004f6:	4b05      	ldr	r3, [pc, #20]	; (800050c <HAL_MspInit+0x40>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	40021000 	.word	0x40021000

08000510 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000520:	d113      	bne.n	800054a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <HAL_TIM_Base_MspInit+0x44>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <HAL_TIM_Base_MspInit+0x44>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	61d3      	str	r3, [r2, #28]
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <HAL_TIM_Base_MspInit+0x44>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	201c      	movs	r0, #28
 8000540:	f000 fd9d 	bl	800107e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000544:	201c      	movs	r0, #28
 8000546:	f000 fdb6 	bl	80010b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800054a:	bf00      	nop
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000

08000558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a20      	ldr	r2, [pc, #128]	; (80005f4 <HAL_UART_MspInit+0x9c>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d139      	bne.n	80005ec <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <HAL_UART_MspInit+0xa0>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a1e      	ldr	r2, [pc, #120]	; (80005f8 <HAL_UART_MspInit+0xa0>)
 800057e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <HAL_UART_MspInit+0xa0>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000590:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <HAL_UART_MspInit+0xa0>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a18      	ldr	r2, [pc, #96]	; (80005f8 <HAL_UART_MspInit+0xa0>)
 8000596:	f043 0304 	orr.w	r3, r3, #4
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <HAL_UART_MspInit+0xa0>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0304 	and.w	r3, r3, #4
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ae:	2302      	movs	r3, #2
 80005b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b2:	2303      	movs	r3, #3
 80005b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	4619      	mov	r1, r3
 80005bc:	480f      	ldr	r0, [pc, #60]	; (80005fc <HAL_UART_MspInit+0xa4>)
 80005be:	f000 fe47 	bl	8001250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	4619      	mov	r1, r3
 80005d6:	4809      	ldr	r0, [pc, #36]	; (80005fc <HAL_UART_MspInit+0xa4>)
 80005d8:	f000 fe3a 	bl	8001250 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	2100      	movs	r1, #0
 80005e0:	2025      	movs	r0, #37	; 0x25
 80005e2:	f000 fd4c 	bl	800107e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005e6:	2025      	movs	r0, #37	; 0x25
 80005e8:	f000 fd65 	bl	80010b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005ec:	bf00      	nop
 80005ee:	3720      	adds	r7, #32
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40013800 	.word	0x40013800
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40010800 	.word	0x40010800

08000600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <NMI_Handler+0x4>

08000606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060a:	e7fe      	b.n	800060a <HardFault_Handler+0x4>

0800060c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <MemManage_Handler+0x4>

08000612 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000616:	e7fe      	b.n	8000616 <BusFault_Handler+0x4>

08000618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800061c:	e7fe      	b.n	800061c <UsageFault_Handler+0x4>

0800061e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr

0800062a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr

08000642 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000646:	f000 fc0b 	bl	8000e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000654:	4802      	ldr	r0, [pc, #8]	; (8000660 <TIM2_IRQHandler+0x10>)
 8000656:	f001 fcc1 	bl	8001fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000034 	.word	0x20000034

08000664 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000668:	4802      	ldr	r0, [pc, #8]	; (8000674 <USART1_IRQHandler+0x10>)
 800066a:	f002 f853 	bl	8002714 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	2000007c 	.word	0x2000007c

08000678 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <SCH_Init>:
 */

#include <scheduler/scheduler.h>


void SCH_Init(void){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	initQueue();
 8000688:	f000 f834 	bl	80006f4 <initQueue>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}

08000690 <SCH_Update>:

void SCH_Update(void){
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	update();
 8000694:	f000 fb06 	bl	8000ca4 <update>
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <SCH_Add_Task>:

MY_TYPE SCH_Add_Task(void (*pFunc)(void), uint32_t delay, uint32_t period) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
	return createTask(pFunc, delay, period);
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	68b9      	ldr	r1, [r7, #8]
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f000 f96b 	bl	8000988 <createTask>
 80006b2:	4603      	mov	r3, r0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <SCH_Dispatch_Task>:

uint8_t SCH_Dispatch_Task(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	return dispatchTask();
 80006c0:	f000 fa7c 	bl	8000bbc <dispatchTask>
 80006c4:	4603      	mov	r3, r0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	bd80      	pop	{r7, pc}

080006ca <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(MY_TYPE TaskId) {
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b082      	sub	sp, #8
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	4603      	mov	r3, r0
 80006d2:	71fb      	strb	r3, [r7, #7]
	return deleteTask(TaskId);
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f9ae 	bl	8000a38 <deleteTask>
 80006dc:	4603      	mov	r3, r0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <SCH_Sleep>:

void SCH_Sleep(void){
 80006e6:	b580      	push	{r7, lr}
 80006e8:	af00      	add	r7, sp, #0
	sleep();
 80006ea:	f000 fb33 	bl	8000d54 <sleep>
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <initQueue>:
IdleID idleIdQueue[MINIMUM_ARRAY_LENGTH];
MY_TYPE headIdleIdQueue;
MY_TYPE tailIdleIdQueue;


void initQueue(void) {
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
	headTaskIdQueue = null;
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <initQueue+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
	tailTaskIdQueue = null;
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <initQueue+0x68>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
	timeSkip = 0;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <initQueue+0x6c>)
 8000708:	2200      	movs	r2, #0
 800070a:	801a      	strh	r2, [r3, #0]
	count = 0;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <initQueue+0x70>)
 800070e:	2200      	movs	r2, #0
 8000710:	801a      	strh	r2, [r3, #0]

	for (uint16_t i = 1; i < MINIMUM_ARRAY_LENGTH; i++) {
 8000712:	2301      	movs	r3, #1
 8000714:	80fb      	strh	r3, [r7, #6]
 8000716:	e010      	b.n	800073a <initQueue+0x46>
		idleIdQueue[i].nextId = i + 1;
 8000718:	88fb      	ldrh	r3, [r7, #6]
 800071a:	b2da      	uxtb	r2, r3
 800071c:	88fb      	ldrh	r3, [r7, #6]
 800071e:	3201      	adds	r2, #1
 8000720:	b2d1      	uxtb	r1, r2
 8000722:	4a11      	ldr	r2, [pc, #68]	; (8000768 <initQueue+0x74>)
 8000724:	54d1      	strb	r1, [r2, r3]
		if (i == MINIMUM_ARRAY_LENGTH)
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	2bff      	cmp	r3, #255	; 0xff
 800072a:	d103      	bne.n	8000734 <initQueue+0x40>
			idleIdQueue[i].nextId = null;
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <initQueue+0x74>)
 8000730:	2100      	movs	r1, #0
 8000732:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 1; i < MINIMUM_ARRAY_LENGTH; i++) {
 8000734:	88fb      	ldrh	r3, [r7, #6]
 8000736:	3301      	adds	r3, #1
 8000738:	80fb      	strh	r3, [r7, #6]
 800073a:	88fb      	ldrh	r3, [r7, #6]
 800073c:	2bfe      	cmp	r3, #254	; 0xfe
 800073e:	d9eb      	bls.n	8000718 <initQueue+0x24>
	}
	headIdleIdQueue = 1;
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <initQueue+0x78>)
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]
	tailIdleIdQueue = MINIMUM_ARRAY_LENGTH - 1;
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <initQueue+0x7c>)
 8000748:	22fe      	movs	r2, #254	; 0xfe
 800074a:	701a      	strb	r2, [r3, #0]

}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	200010c0 	.word	0x200010c0
 800075c:	200010c1 	.word	0x200010c1
 8000760:	200010be 	.word	0x200010be
 8000764:	200010bc 	.word	0x200010bc
 8000768:	200010c4 	.word	0x200010c4
 800076c:	200011c3 	.word	0x200011c3
 8000770:	200011c4 	.word	0x200011c4

08000774 <_dequeueIdleId>:

uint8_t _dequeueIdleId() {
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
	IdleID idleId = idleIdQueue[headIdleIdQueue];
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <_dequeueIdleId+0x48>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	461a      	mov	r2, r3
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <_dequeueIdleId+0x4c>)
 8000782:	5c9b      	ldrb	r3, [r3, r2]
 8000784:	713b      	strb	r3, [r7, #4]
	if (headIdleIdQueue != null) {
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <_dequeueIdleId+0x48>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d010      	beq.n	80007b0 <_dequeueIdleId+0x3c>
		uint8_t newId = headIdleIdQueue;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <_dequeueIdleId+0x48>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	71fb      	strb	r3, [r7, #7]
		headIdleIdQueue = idleId.nextId;
 8000794:	793a      	ldrb	r2, [r7, #4]
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <_dequeueIdleId+0x48>)
 8000798:	701a      	strb	r2, [r3, #0]
		idleId.nextId = null;
 800079a:	2300      	movs	r3, #0
 800079c:	713b      	strb	r3, [r7, #4]
		if (headIdleIdQueue == null) {
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <_dequeueIdleId+0x48>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d102      	bne.n	80007ac <_dequeueIdleId+0x38>
			tailIdleIdQueue = null;
 80007a6:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <_dequeueIdleId+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
		}
		return newId;
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	e000      	b.n	80007b2 <_dequeueIdleId+0x3e>
	}
	return null;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	200011c3 	.word	0x200011c3
 80007c0:	200010c4 	.word	0x200010c4
 80007c4:	200011c4 	.word	0x200011c4

080007c8 <_enqueueTask>:


MY_TYPE _enqueueTask(MY_TYPE newTaskId) {
 80007c8:	b480      	push	{r7}
 80007ca:	b087      	sub	sp, #28
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
	//First task in queue.
	if (headTaskIdQueue == null){
 80007d2:	4b6a      	ldr	r3, [pc, #424]	; (800097c <_enqueueTask+0x1b4>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d107      	bne.n	80007ea <_enqueueTask+0x22>
		headTaskIdQueue = newTaskId;
 80007da:	4a68      	ldr	r2, [pc, #416]	; (800097c <_enqueueTask+0x1b4>)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	7013      	strb	r3, [r2, #0]
		tailTaskIdQueue = newTaskId;
 80007e0:	4a67      	ldr	r2, [pc, #412]	; (8000980 <_enqueueTask+0x1b8>)
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	7013      	strb	r3, [r2, #0]
		return newTaskId;
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	e0c3      	b.n	8000972 <_enqueueTask+0x1aa>
	}

	//Task will add at middle of queue.
	MY_TYPE curTaskId = headTaskIdQueue;
 80007ea:	4b64      	ldr	r3, [pc, #400]	; (800097c <_enqueueTask+0x1b4>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	75fb      	strb	r3, [r7, #23]
	uint32_t sum = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	613b      	str	r3, [r7, #16]
	while (curTaskId != null){
 80007f4:	e093      	b.n	800091e <_enqueueTask+0x156>
		if (sum + tasks[curTaskId].delay > tasks[newTaskId].delay){
 80007f6:	7dfb      	ldrb	r3, [r7, #23]
 80007f8:	4a62      	ldr	r2, [pc, #392]	; (8000984 <_enqueueTask+0x1bc>)
 80007fa:	011b      	lsls	r3, r3, #4
 80007fc:	4413      	add	r3, r2
 80007fe:	3304      	adds	r3, #4
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	441a      	add	r2, r3
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	495e      	ldr	r1, [pc, #376]	; (8000984 <_enqueueTask+0x1bc>)
 800080a:	011b      	lsls	r3, r3, #4
 800080c:	440b      	add	r3, r1
 800080e:	3304      	adds	r3, #4
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	429a      	cmp	r2, r3
 8000814:	d973      	bls.n	80008fe <_enqueueTask+0x136>
			if (curTaskId == headTaskIdQueue){
 8000816:	4b59      	ldr	r3, [pc, #356]	; (800097c <_enqueueTask+0x1b4>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	7dfa      	ldrb	r2, [r7, #23]
 800081c:	429a      	cmp	r2, r3
 800081e:	d128      	bne.n	8000872 <_enqueueTask+0xaa>
				tasks[newTaskId].nextId = headTaskIdQueue;
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	4a56      	ldr	r2, [pc, #344]	; (800097c <_enqueueTask+0x1b4>)
 8000824:	7811      	ldrb	r1, [r2, #0]
 8000826:	4a57      	ldr	r2, [pc, #348]	; (8000984 <_enqueueTask+0x1bc>)
 8000828:	011b      	lsls	r3, r3, #4
 800082a:	4413      	add	r3, r2
 800082c:	330d      	adds	r3, #13
 800082e:	460a      	mov	r2, r1
 8000830:	701a      	strb	r2, [r3, #0]
				headTaskIdQueue = newTaskId;
 8000832:	4a52      	ldr	r2, [pc, #328]	; (800097c <_enqueueTask+0x1b4>)
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	7013      	strb	r3, [r2, #0]
				tasks[curTaskId].delay -= tasks[newTaskId].delay;
 8000838:	7dfb      	ldrb	r3, [r7, #23]
 800083a:	4a52      	ldr	r2, [pc, #328]	; (8000984 <_enqueueTask+0x1bc>)
 800083c:	011b      	lsls	r3, r3, #4
 800083e:	4413      	add	r3, r2
 8000840:	3304      	adds	r3, #4
 8000842:	6819      	ldr	r1, [r3, #0]
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	4a4f      	ldr	r2, [pc, #316]	; (8000984 <_enqueueTask+0x1bc>)
 8000848:	011b      	lsls	r3, r3, #4
 800084a:	4413      	add	r3, r2
 800084c:	3304      	adds	r3, #4
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	7dfb      	ldrb	r3, [r7, #23]
 8000852:	1a8a      	subs	r2, r1, r2
 8000854:	494b      	ldr	r1, [pc, #300]	; (8000984 <_enqueueTask+0x1bc>)
 8000856:	011b      	lsls	r3, r3, #4
 8000858:	440b      	add	r3, r1
 800085a:	3304      	adds	r3, #4
 800085c:	601a      	str	r2, [r3, #0]
				tasks[curTaskId].previousId = headTaskIdQueue;
 800085e:	7dfb      	ldrb	r3, [r7, #23]
 8000860:	4a46      	ldr	r2, [pc, #280]	; (800097c <_enqueueTask+0x1b4>)
 8000862:	7811      	ldrb	r1, [r2, #0]
 8000864:	4a47      	ldr	r2, [pc, #284]	; (8000984 <_enqueueTask+0x1bc>)
 8000866:	011b      	lsls	r3, r3, #4
 8000868:	4413      	add	r3, r2
 800086a:	330c      	adds	r3, #12
 800086c:	460a      	mov	r2, r1
 800086e:	701a      	strb	r2, [r3, #0]
 8000870:	e043      	b.n	80008fa <_enqueueTask+0x132>
			} else {
				tasks[newTaskId].nextId = curTaskId;
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	4a43      	ldr	r2, [pc, #268]	; (8000984 <_enqueueTask+0x1bc>)
 8000876:	011b      	lsls	r3, r3, #4
 8000878:	4413      	add	r3, r2
 800087a:	330d      	adds	r3, #13
 800087c:	7dfa      	ldrb	r2, [r7, #23]
 800087e:	701a      	strb	r2, [r3, #0]
				MY_TYPE oldPreId = tasks[curTaskId].previousId;
 8000880:	7dfb      	ldrb	r3, [r7, #23]
 8000882:	4a40      	ldr	r2, [pc, #256]	; (8000984 <_enqueueTask+0x1bc>)
 8000884:	011b      	lsls	r3, r3, #4
 8000886:	4413      	add	r3, r2
 8000888:	330c      	adds	r3, #12
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	73fb      	strb	r3, [r7, #15]

				tasks[newTaskId].previousId = oldPreId;
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	4a3c      	ldr	r2, [pc, #240]	; (8000984 <_enqueueTask+0x1bc>)
 8000892:	011b      	lsls	r3, r3, #4
 8000894:	4413      	add	r3, r2
 8000896:	330c      	adds	r3, #12
 8000898:	7bfa      	ldrb	r2, [r7, #15]
 800089a:	701a      	strb	r2, [r3, #0]
				tasks[curTaskId].previousId = newTaskId;
 800089c:	7dfb      	ldrb	r3, [r7, #23]
 800089e:	4a39      	ldr	r2, [pc, #228]	; (8000984 <_enqueueTask+0x1bc>)
 80008a0:	011b      	lsls	r3, r3, #4
 80008a2:	4413      	add	r3, r2
 80008a4:	330c      	adds	r3, #12
 80008a6:	79fa      	ldrb	r2, [r7, #7]
 80008a8:	701a      	strb	r2, [r3, #0]

				tasks[oldPreId].nextId = newTaskId;
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	4a35      	ldr	r2, [pc, #212]	; (8000984 <_enqueueTask+0x1bc>)
 80008ae:	011b      	lsls	r3, r3, #4
 80008b0:	4413      	add	r3, r2
 80008b2:	330d      	adds	r3, #13
 80008b4:	79fa      	ldrb	r2, [r7, #7]
 80008b6:	701a      	strb	r2, [r3, #0]

				tasks[newTaskId].delay -= sum;
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	4a32      	ldr	r2, [pc, #200]	; (8000984 <_enqueueTask+0x1bc>)
 80008bc:	011b      	lsls	r3, r3, #4
 80008be:	4413      	add	r3, r2
 80008c0:	3304      	adds	r3, #4
 80008c2:	6819      	ldr	r1, [r3, #0]
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	1a8a      	subs	r2, r1, r2
 80008ca:	492e      	ldr	r1, [pc, #184]	; (8000984 <_enqueueTask+0x1bc>)
 80008cc:	011b      	lsls	r3, r3, #4
 80008ce:	440b      	add	r3, r1
 80008d0:	3304      	adds	r3, #4
 80008d2:	601a      	str	r2, [r3, #0]
				tasks[curTaskId].delay  -= tasks[newTaskId].delay;
 80008d4:	7dfb      	ldrb	r3, [r7, #23]
 80008d6:	4a2b      	ldr	r2, [pc, #172]	; (8000984 <_enqueueTask+0x1bc>)
 80008d8:	011b      	lsls	r3, r3, #4
 80008da:	4413      	add	r3, r2
 80008dc:	3304      	adds	r3, #4
 80008de:	6819      	ldr	r1, [r3, #0]
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	4a28      	ldr	r2, [pc, #160]	; (8000984 <_enqueueTask+0x1bc>)
 80008e4:	011b      	lsls	r3, r3, #4
 80008e6:	4413      	add	r3, r2
 80008e8:	3304      	adds	r3, #4
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	7dfb      	ldrb	r3, [r7, #23]
 80008ee:	1a8a      	subs	r2, r1, r2
 80008f0:	4924      	ldr	r1, [pc, #144]	; (8000984 <_enqueueTask+0x1bc>)
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	440b      	add	r3, r1
 80008f6:	3304      	adds	r3, #4
 80008f8:	601a      	str	r2, [r3, #0]
			}
			return newTaskId;
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	e039      	b.n	8000972 <_enqueueTask+0x1aa>
		}
		sum 	+= tasks[curTaskId].delay;
 80008fe:	7dfb      	ldrb	r3, [r7, #23]
 8000900:	4a20      	ldr	r2, [pc, #128]	; (8000984 <_enqueueTask+0x1bc>)
 8000902:	011b      	lsls	r3, r3, #4
 8000904:	4413      	add	r3, r2
 8000906:	3304      	adds	r3, #4
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	4413      	add	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
		curTaskId = tasks[curTaskId].nextId;
 8000910:	7dfb      	ldrb	r3, [r7, #23]
 8000912:	4a1c      	ldr	r2, [pc, #112]	; (8000984 <_enqueueTask+0x1bc>)
 8000914:	011b      	lsls	r3, r3, #4
 8000916:	4413      	add	r3, r2
 8000918:	330d      	adds	r3, #13
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	75fb      	strb	r3, [r7, #23]
	while (curTaskId != null){
 800091e:	7dfb      	ldrb	r3, [r7, #23]
 8000920:	2b00      	cmp	r3, #0
 8000922:	f47f af68 	bne.w	80007f6 <_enqueueTask+0x2e>
	}

	//Task will add of tail
	if (curTaskId == null) {
 8000926:	7dfb      	ldrb	r3, [r7, #23]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d121      	bne.n	8000970 <_enqueueTask+0x1a8>
		tasks[tailTaskIdQueue].nextId = newTaskId;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <_enqueueTask+0x1b8>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <_enqueueTask+0x1bc>)
 8000932:	011b      	lsls	r3, r3, #4
 8000934:	4413      	add	r3, r2
 8000936:	330d      	adds	r3, #13
 8000938:	79fa      	ldrb	r2, [r7, #7]
 800093a:	701a      	strb	r2, [r3, #0]
		tasks[newTaskId].previousId = tailTaskIdQueue;
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	4a10      	ldr	r2, [pc, #64]	; (8000980 <_enqueueTask+0x1b8>)
 8000940:	7811      	ldrb	r1, [r2, #0]
 8000942:	4a10      	ldr	r2, [pc, #64]	; (8000984 <_enqueueTask+0x1bc>)
 8000944:	011b      	lsls	r3, r3, #4
 8000946:	4413      	add	r3, r2
 8000948:	330c      	adds	r3, #12
 800094a:	460a      	mov	r2, r1
 800094c:	701a      	strb	r2, [r3, #0]
		tailTaskIdQueue = newTaskId;
 800094e:	4a0c      	ldr	r2, [pc, #48]	; (8000980 <_enqueueTask+0x1b8>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	7013      	strb	r3, [r2, #0]
		tasks[newTaskId].delay    -= sum;
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <_enqueueTask+0x1bc>)
 8000958:	011b      	lsls	r3, r3, #4
 800095a:	4413      	add	r3, r2
 800095c:	3304      	adds	r3, #4
 800095e:	6819      	ldr	r1, [r3, #0]
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	1a8a      	subs	r2, r1, r2
 8000966:	4907      	ldr	r1, [pc, #28]	; (8000984 <_enqueueTask+0x1bc>)
 8000968:	011b      	lsls	r3, r3, #4
 800096a:	440b      	add	r3, r1
 800096c:	3304      	adds	r3, #4
 800096e:	601a      	str	r2, [r3, #0]
	}

	return newTaskId;
 8000970:	79fb      	ldrb	r3, [r7, #7]
}
 8000972:	4618      	mov	r0, r3
 8000974:	371c      	adds	r7, #28
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	200010c0 	.word	0x200010c0
 8000980:	200010c1 	.word	0x200010c1
 8000984:	200000cc 	.word	0x200000cc

08000988 <createTask>:


MY_TYPE createTask(void (*pFunc)(void), uint32_t delay, uint32_t period) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
	MY_TYPE newId = _dequeueIdleId();
 8000994:	f7ff feee 	bl	8000774 <_dequeueIdleId>
 8000998:	4603      	mov	r3, r0
 800099a:	75fb      	strb	r3, [r7, #23]
	if (newId == null) return -1;
 800099c:	7dfb      	ldrb	r3, [r7, #23]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d101      	bne.n	80009a6 <createTask+0x1e>
 80009a2:	23ff      	movs	r3, #255	; 0xff
 80009a4:	e03c      	b.n	8000a20 <createTask+0x98>

	delay  /= TIMER_CYCLE;
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	4a1f      	ldr	r2, [pc, #124]	; (8000a28 <createTask+0xa0>)
 80009aa:	fba2 2303 	umull	r2, r3, r2, r3
 80009ae:	08db      	lsrs	r3, r3, #3
 80009b0:	60bb      	str	r3, [r7, #8]
	period /= TIMER_CYCLE;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a1c      	ldr	r2, [pc, #112]	; (8000a28 <createTask+0xa0>)
 80009b6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ba:	08db      	lsrs	r3, r3, #3
 80009bc:	607b      	str	r3, [r7, #4]

	tasks[newId].pFunc		= pFunc;
 80009be:	7dfb      	ldrb	r3, [r7, #23]
 80009c0:	4a1a      	ldr	r2, [pc, #104]	; (8000a2c <createTask+0xa4>)
 80009c2:	011b      	lsls	r3, r3, #4
 80009c4:	4413      	add	r3, r2
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	601a      	str	r2, [r3, #0]
	tasks[newId].delay 		= delay + timeSkip;
 80009ca:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <createTask+0xa8>)
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	4619      	mov	r1, r3
 80009d0:	7dfb      	ldrb	r3, [r7, #23]
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	440a      	add	r2, r1
 80009d6:	4915      	ldr	r1, [pc, #84]	; (8000a2c <createTask+0xa4>)
 80009d8:	011b      	lsls	r3, r3, #4
 80009da:	440b      	add	r3, r1
 80009dc:	3304      	adds	r3, #4
 80009de:	601a      	str	r2, [r3, #0]
	tasks[newId].period	    = period;
 80009e0:	7dfb      	ldrb	r3, [r7, #23]
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <createTask+0xa4>)
 80009e4:	011b      	lsls	r3, r3, #4
 80009e6:	4413      	add	r3, r2
 80009e8:	3308      	adds	r3, #8
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	601a      	str	r2, [r3, #0]
	tasks[newId].nextId 	= null;
 80009ee:	7dfb      	ldrb	r3, [r7, #23]
 80009f0:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <createTask+0xa4>)
 80009f2:	011b      	lsls	r3, r3, #4
 80009f4:	4413      	add	r3, r2
 80009f6:	330d      	adds	r3, #13
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
	tasks[newId].previousId = null;
 80009fc:	7dfb      	ldrb	r3, [r7, #23]
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <createTask+0xa4>)
 8000a00:	011b      	lsls	r3, r3, #4
 8000a02:	4413      	add	r3, r2
 8000a04:	330c      	adds	r3, #12
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
	count++;
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <createTask+0xac>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <createTask+0xac>)
 8000a14:	801a      	strh	r2, [r3, #0]

	_enqueueTask(newId);
 8000a16:	7dfb      	ldrb	r3, [r7, #23]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fed5 	bl	80007c8 <_enqueueTask>
	return newId;
 8000a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	cccccccd 	.word	0xcccccccd
 8000a2c:	200000cc 	.word	0x200000cc
 8000a30:	200010be 	.word	0x200010be
 8000a34:	200010bc 	.word	0x200010bc

08000a38 <deleteTask>:


uint8_t deleteTask(MY_TYPE deletedTaskId) {
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
	count--;
 8000a42:	4b59      	ldr	r3, [pc, #356]	; (8000ba8 <deleteTask+0x170>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	4b57      	ldr	r3, [pc, #348]	; (8000ba8 <deleteTask+0x170>)
 8000a4c:	801a      	strh	r2, [r3, #0]

	MY_TYPE preDeletedId = tasks[deletedTaskId].previousId;
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	4a56      	ldr	r2, [pc, #344]	; (8000bac <deleteTask+0x174>)
 8000a52:	011b      	lsls	r3, r3, #4
 8000a54:	4413      	add	r3, r2
 8000a56:	330c      	adds	r3, #12
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	73fb      	strb	r3, [r7, #15]
	MY_TYPE nextDeletedId = tasks[deletedTaskId].nextId;
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	4a53      	ldr	r2, [pc, #332]	; (8000bac <deleteTask+0x174>)
 8000a60:	011b      	lsls	r3, r3, #4
 8000a62:	4413      	add	r3, r2
 8000a64:	330d      	adds	r3, #13
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	73bb      	strb	r3, [r7, #14]

	if (deletedTaskId == headTaskIdQueue){
 8000a6a:	4b51      	ldr	r3, [pc, #324]	; (8000bb0 <deleteTask+0x178>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	79fa      	ldrb	r2, [r7, #7]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d153      	bne.n	8000b1c <deleteTask+0xe4>
		if (headTaskIdQueue == tailTaskIdQueue) {
 8000a74:	4b4e      	ldr	r3, [pc, #312]	; (8000bb0 <deleteTask+0x178>)
 8000a76:	781a      	ldrb	r2, [r3, #0]
 8000a78:	4b4e      	ldr	r3, [pc, #312]	; (8000bb4 <deleteTask+0x17c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d114      	bne.n	8000aaa <deleteTask+0x72>
			headTaskIdQueue = null;
 8000a80:	4b4b      	ldr	r3, [pc, #300]	; (8000bb0 <deleteTask+0x178>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
			tailTaskIdQueue = null;
 8000a86:	4b4b      	ldr	r3, [pc, #300]	; (8000bb4 <deleteTask+0x17c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
			tasks[deletedTaskId].nextId = null;
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	4a47      	ldr	r2, [pc, #284]	; (8000bac <deleteTask+0x174>)
 8000a90:	011b      	lsls	r3, r3, #4
 8000a92:	4413      	add	r3, r2
 8000a94:	330d      	adds	r3, #13
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
			tasks[deletedTaskId].previousId = null;
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	4a43      	ldr	r2, [pc, #268]	; (8000bac <deleteTask+0x174>)
 8000a9e:	011b      	lsls	r3, r3, #4
 8000aa0:	4413      	add	r3, r2
 8000aa2:	330c      	adds	r3, #12
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
 8000aa8:	e036      	b.n	8000b18 <deleteTask+0xe0>
		} else {
			tasks[nextDeletedId].delay += tasks[deletedTaskId].delay;
 8000aaa:	7bbb      	ldrb	r3, [r7, #14]
 8000aac:	4a3f      	ldr	r2, [pc, #252]	; (8000bac <deleteTask+0x174>)
 8000aae:	011b      	lsls	r3, r3, #4
 8000ab0:	4413      	add	r3, r2
 8000ab2:	3304      	adds	r3, #4
 8000ab4:	6819      	ldr	r1, [r3, #0]
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	4a3c      	ldr	r2, [pc, #240]	; (8000bac <deleteTask+0x174>)
 8000aba:	011b      	lsls	r3, r3, #4
 8000abc:	4413      	add	r3, r2
 8000abe:	3304      	adds	r3, #4
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	7bbb      	ldrb	r3, [r7, #14]
 8000ac4:	440a      	add	r2, r1
 8000ac6:	4939      	ldr	r1, [pc, #228]	; (8000bac <deleteTask+0x174>)
 8000ac8:	011b      	lsls	r3, r3, #4
 8000aca:	440b      	add	r3, r1
 8000acc:	3304      	adds	r3, #4
 8000ace:	601a      	str	r2, [r3, #0]
			tasks[preDeletedId].nextId = nextDeletedId;
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
 8000ad2:	4a36      	ldr	r2, [pc, #216]	; (8000bac <deleteTask+0x174>)
 8000ad4:	011b      	lsls	r3, r3, #4
 8000ad6:	4413      	add	r3, r2
 8000ad8:	330d      	adds	r3, #13
 8000ada:	7bba      	ldrb	r2, [r7, #14]
 8000adc:	701a      	strb	r2, [r3, #0]
			tasks[nextDeletedId].previousId = preDeletedId;
 8000ade:	7bbb      	ldrb	r3, [r7, #14]
 8000ae0:	4a32      	ldr	r2, [pc, #200]	; (8000bac <deleteTask+0x174>)
 8000ae2:	011b      	lsls	r3, r3, #4
 8000ae4:	4413      	add	r3, r2
 8000ae6:	330c      	adds	r3, #12
 8000ae8:	7bfa      	ldrb	r2, [r7, #15]
 8000aea:	701a      	strb	r2, [r3, #0]
			headTaskIdQueue = tasks[deletedTaskId].nextId;
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	4a2f      	ldr	r2, [pc, #188]	; (8000bac <deleteTask+0x174>)
 8000af0:	011b      	lsls	r3, r3, #4
 8000af2:	4413      	add	r3, r2
 8000af4:	330d      	adds	r3, #13
 8000af6:	781a      	ldrb	r2, [r3, #0]
 8000af8:	4b2d      	ldr	r3, [pc, #180]	; (8000bb0 <deleteTask+0x178>)
 8000afa:	701a      	strb	r2, [r3, #0]
			tasks[deletedTaskId].nextId = null;
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	4a2b      	ldr	r2, [pc, #172]	; (8000bac <deleteTask+0x174>)
 8000b00:	011b      	lsls	r3, r3, #4
 8000b02:	4413      	add	r3, r2
 8000b04:	330d      	adds	r3, #13
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
			tasks[deletedTaskId].previousId = null;
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	4a27      	ldr	r2, [pc, #156]	; (8000bac <deleteTask+0x174>)
 8000b0e:	011b      	lsls	r3, r3, #4
 8000b10:	4413      	add	r3, r2
 8000b12:	330c      	adds	r3, #12
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e03f      	b.n	8000b9c <deleteTask+0x164>
	}

	if (preDeletedId != null) tasks[preDeletedId].nextId = nextDeletedId;
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d006      	beq.n	8000b30 <deleteTask+0xf8>
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	4a21      	ldr	r2, [pc, #132]	; (8000bac <deleteTask+0x174>)
 8000b26:	011b      	lsls	r3, r3, #4
 8000b28:	4413      	add	r3, r2
 8000b2a:	330d      	adds	r3, #13
 8000b2c:	7bba      	ldrb	r2, [r7, #14]
 8000b2e:	701a      	strb	r2, [r3, #0]
	if (nextDeletedId != null){
 8000b30:	7bbb      	ldrb	r3, [r7, #14]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d01a      	beq.n	8000b6c <deleteTask+0x134>
		tasks[nextDeletedId].delay += tasks[deletedTaskId].delay;
 8000b36:	7bbb      	ldrb	r3, [r7, #14]
 8000b38:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <deleteTask+0x174>)
 8000b3a:	011b      	lsls	r3, r3, #4
 8000b3c:	4413      	add	r3, r2
 8000b3e:	3304      	adds	r3, #4
 8000b40:	6819      	ldr	r1, [r3, #0]
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	4a19      	ldr	r2, [pc, #100]	; (8000bac <deleteTask+0x174>)
 8000b46:	011b      	lsls	r3, r3, #4
 8000b48:	4413      	add	r3, r2
 8000b4a:	3304      	adds	r3, #4
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	7bbb      	ldrb	r3, [r7, #14]
 8000b50:	440a      	add	r2, r1
 8000b52:	4916      	ldr	r1, [pc, #88]	; (8000bac <deleteTask+0x174>)
 8000b54:	011b      	lsls	r3, r3, #4
 8000b56:	440b      	add	r3, r1
 8000b58:	3304      	adds	r3, #4
 8000b5a:	601a      	str	r2, [r3, #0]
		tasks[nextDeletedId].previousId = preDeletedId;
 8000b5c:	7bbb      	ldrb	r3, [r7, #14]
 8000b5e:	4a13      	ldr	r2, [pc, #76]	; (8000bac <deleteTask+0x174>)
 8000b60:	011b      	lsls	r3, r3, #4
 8000b62:	4413      	add	r3, r2
 8000b64:	330c      	adds	r3, #12
 8000b66:	7bfa      	ldrb	r2, [r7, #15]
 8000b68:	701a      	strb	r2, [r3, #0]
 8000b6a:	e008      	b.n	8000b7e <deleteTask+0x146>
	} else {
		tailTaskIdQueue = preDeletedId;
 8000b6c:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <deleteTask+0x17c>)
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	7013      	strb	r3, [r2, #0]
		idleIdQueue[tailTaskIdQueue].nextId = null;
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <deleteTask+0x17c>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <deleteTask+0x180>)
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	5499      	strb	r1, [r3, r2]
	}

	tasks[deletedTaskId].nextId = null;
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <deleteTask+0x174>)
 8000b82:	011b      	lsls	r3, r3, #4
 8000b84:	4413      	add	r3, r2
 8000b86:	330d      	adds	r3, #13
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
	tasks[deletedTaskId].previousId = null;
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	4a07      	ldr	r2, [pc, #28]	; (8000bac <deleteTask+0x174>)
 8000b90:	011b      	lsls	r3, r3, #4
 8000b92:	4413      	add	r3, r2
 8000b94:	330c      	adds	r3, #12
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]

	return 1;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	200010bc 	.word	0x200010bc
 8000bac:	200000cc 	.word	0x200000cc
 8000bb0:	200010c0 	.word	0x200010c0
 8000bb4:	200010c1 	.word	0x200010c1
 8000bb8:	200010c4 	.word	0x200010c4

08000bbc <dispatchTask>:


uint8_t dispatchTask(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
	if (headTaskIdQueue == null || tasks[headTaskIdQueue].delay > 0) return 0;
 8000bc2:	4b34      	ldr	r3, [pc, #208]	; (8000c94 <dispatchTask+0xd8>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d008      	beq.n	8000bdc <dispatchTask+0x20>
 8000bca:	4b32      	ldr	r3, [pc, #200]	; (8000c94 <dispatchTask+0xd8>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	4a32      	ldr	r2, [pc, #200]	; (8000c98 <dispatchTask+0xdc>)
 8000bd0:	011b      	lsls	r3, r3, #4
 8000bd2:	4413      	add	r3, r2
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <dispatchTask+0x24>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	e054      	b.n	8000c8a <dispatchTask+0xce>

	//Remove head task out of queue (dequeue, not delete)
	//and reconfigure `next` and `previous pointer`.
	uint8_t readyTaskId = headTaskIdQueue;
 8000be0:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <dispatchTask+0xd8>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	71fb      	strb	r3, [r7, #7]
	headTaskIdQueue = tasks[headTaskIdQueue].nextId;
 8000be6:	4b2b      	ldr	r3, [pc, #172]	; (8000c94 <dispatchTask+0xd8>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	4a2b      	ldr	r2, [pc, #172]	; (8000c98 <dispatchTask+0xdc>)
 8000bec:	011b      	lsls	r3, r3, #4
 8000bee:	4413      	add	r3, r2
 8000bf0:	330d      	adds	r3, #13
 8000bf2:	781a      	ldrb	r2, [r3, #0]
 8000bf4:	4b27      	ldr	r3, [pc, #156]	; (8000c94 <dispatchTask+0xd8>)
 8000bf6:	701a      	strb	r2, [r3, #0]
	if (readyTaskId == tailTaskIdQueue) {
 8000bf8:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <dispatchTask+0xe0>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	79fa      	ldrb	r2, [r7, #7]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d106      	bne.n	8000c10 <dispatchTask+0x54>
		headTaskIdQueue = null;
 8000c02:	4b24      	ldr	r3, [pc, #144]	; (8000c94 <dispatchTask+0xd8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
		tailTaskIdQueue = null;
 8000c08:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <dispatchTask+0xe0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
 8000c0e:	e007      	b.n	8000c20 <dispatchTask+0x64>
	} else {
		tasks[headTaskIdQueue].previousId = null;
 8000c10:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <dispatchTask+0xd8>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4a20      	ldr	r2, [pc, #128]	; (8000c98 <dispatchTask+0xdc>)
 8000c16:	011b      	lsls	r3, r3, #4
 8000c18:	4413      	add	r3, r2
 8000c1a:	330c      	adds	r3, #12
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
	}

	tasks[readyTaskId].previousId = null;
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	4a1d      	ldr	r2, [pc, #116]	; (8000c98 <dispatchTask+0xdc>)
 8000c24:	011b      	lsls	r3, r3, #4
 8000c26:	4413      	add	r3, r2
 8000c28:	330c      	adds	r3, #12
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
	tasks[readyTaskId].nextId = null;
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <dispatchTask+0xdc>)
 8000c32:	011b      	lsls	r3, r3, #4
 8000c34:	4413      	add	r3, r2
 8000c36:	330d      	adds	r3, #13
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
	tasks[readyTaskId].delay = tasks[readyTaskId].period;
 8000c3c:	79fa      	ldrb	r2, [r7, #7]
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	4915      	ldr	r1, [pc, #84]	; (8000c98 <dispatchTask+0xdc>)
 8000c42:	0112      	lsls	r2, r2, #4
 8000c44:	440a      	add	r2, r1
 8000c46:	3208      	adds	r2, #8
 8000c48:	6812      	ldr	r2, [r2, #0]
 8000c4a:	4913      	ldr	r1, [pc, #76]	; (8000c98 <dispatchTask+0xdc>)
 8000c4c:	011b      	lsls	r3, r3, #4
 8000c4e:	440b      	add	r3, r1
 8000c50:	3304      	adds	r3, #4
 8000c52:	601a      	str	r2, [r3, #0]

	//Run task
	tasks[readyTaskId].pFunc();
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <dispatchTask+0xdc>)
 8000c58:	011b      	lsls	r3, r3, #4
 8000c5a:	4413      	add	r3, r2
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4798      	blx	r3
	TaskIdJustRun = readyTaskId;
 8000c60:	4a0f      	ldr	r2, [pc, #60]	; (8000ca0 <dispatchTask+0xe4>)
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	7013      	strb	r3, [r2, #0]

	//Add again if a task has period value isn't equal to 0.
	if (tasks[readyTaskId].period != 0) _enqueueTask(readyTaskId);
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <dispatchTask+0xdc>)
 8000c6a:	011b      	lsls	r3, r3, #4
 8000c6c:	4413      	add	r3, r2
 8000c6e:	3308      	adds	r3, #8
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d004      	beq.n	8000c80 <dispatchTask+0xc4>
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fda5 	bl	80007c8 <_enqueueTask>
 8000c7e:	e003      	b.n	8000c88 <dispatchTask+0xcc>
	else deleteTask(readyTaskId);
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fed8 	bl	8000a38 <deleteTask>

	return 1;
 8000c88:	2301      	movs	r3, #1
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200010c0 	.word	0x200010c0
 8000c98:	200000cc 	.word	0x200000cc
 8000c9c:	200010c1 	.word	0x200010c1
 8000ca0:	200000c9 	.word	0x200000c9

08000ca4 <update>:

void update(void) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
	if (headTaskIdQueue == null) {
 8000caa:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <update+0xa0>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10c      	bne.n	8000ccc <update+0x28>
		timeSkip = (count > 0) ? timeSkip + 1 : 0;
 8000cb2:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <update+0xa4>)
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d004      	beq.n	8000cc4 <update+0x20>
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <update+0xa8>)
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	e000      	b.n	8000cc6 <update+0x22>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4a21      	ldr	r2, [pc, #132]	; (8000d4c <update+0xa8>)
 8000cc8:	8013      	strh	r3, [r2, #0]
		return;
 8000cca:	e036      	b.n	8000d3a <update+0x96>
	}
	timeSkip++;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <update+0xa8>)
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <update+0xa8>)
 8000cd6:	801a      	strh	r2, [r3, #0]
	if (tasks[headTaskIdQueue].delay > 0){
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <update+0xa0>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4a1c      	ldr	r2, [pc, #112]	; (8000d50 <update+0xac>)
 8000cde:	011b      	lsls	r3, r3, #4
 8000ce0:	4413      	add	r3, r2
 8000ce2:	3304      	adds	r3, #4
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d027      	beq.n	8000d3a <update+0x96>
		int temp = tasks[headTaskIdQueue].delay - timeSkip;
 8000cea:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <update+0xa0>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	4a18      	ldr	r2, [pc, #96]	; (8000d50 <update+0xac>)
 8000cf0:	011b      	lsls	r3, r3, #4
 8000cf2:	4413      	add	r3, r2
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <update+0xa8>)
 8000cfa:	8812      	ldrh	r2, [r2, #0]
 8000cfc:	1a9b      	subs	r3, r3, r2
 8000cfe:	607b      	str	r3, [r7, #4]
		if (temp >= 0) {
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	db0b      	blt.n	8000d1e <update+0x7a>
			tasks[headTaskIdQueue].delay = temp;
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <update+0xa0>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	4910      	ldr	r1, [pc, #64]	; (8000d50 <update+0xac>)
 8000d0e:	011b      	lsls	r3, r3, #4
 8000d10:	440b      	add	r3, r1
 8000d12:	3304      	adds	r3, #4
 8000d14:	601a      	str	r2, [r3, #0]
			timeSkip = 0;
 8000d16:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <update+0xa8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	801a      	strh	r2, [r3, #0]
 8000d1c:	e00d      	b.n	8000d3a <update+0x96>
		} else {
			tasks[headTaskIdQueue].delay = 0;
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <update+0xa0>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <update+0xac>)
 8000d24:	011b      	lsls	r3, r3, #4
 8000d26:	4413      	add	r3, r2
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
			timeSkip = 0 - temp;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	425b      	negs	r3, r3
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <update+0xa8>)
 8000d38:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	200010c0 	.word	0x200010c0
 8000d48:	200010bc 	.word	0x200010bc
 8000d4c:	200010be 	.word	0x200010be
 8000d50:	200000cc 	.word	0x200000cc

08000d54 <sleep>:

void sleep(void) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	//Still task need to run
	if (tasks[headTaskIdQueue].delay == 0) return
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <sleep+0x2c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <sleep+0x30>)
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	4413      	add	r3, r2
 8000d62:	3304      	adds	r3, #4
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d102      	bne.n	8000d70 <sleep+0x1c>
	//No task to run at this time, then go sleep
	HAL_SuspendTick();
 8000d6a:	f000 f895 	bl	8000e98 <HAL_SuspendTick>
 8000d6e:	e005      	b.n	8000d7c <sleep+0x28>
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000d70:	2101      	movs	r1, #1
 8000d72:	2000      	movs	r0, #0
 8000d74:	f000 fc6a 	bl	800164c <HAL_PWR_EnterSLEEPMode>
	HAL_ResumeTick();
 8000d78:	f000 f89c 	bl	8000eb4 <HAL_ResumeTick>
}
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200010c0 	.word	0x200010c0
 8000d84:	200000cc 	.word	0x200000cc

08000d88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d88:	f7ff fc76 	bl	8000678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d8c:	480b      	ldr	r0, [pc, #44]	; (8000dbc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d8e:	490c      	ldr	r1, [pc, #48]	; (8000dc0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d90:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000da4:	4c09      	ldr	r4, [pc, #36]	; (8000dcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db2:	f002 f991 	bl	80030d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000db6:	f7ff f9c9 	bl	800014c <main>
  bx lr
 8000dba:	4770      	bx	lr
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dc4:	0800317c 	.word	0x0800317c
  ldr r2, =_sbss
 8000dc8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dcc:	200011cc 	.word	0x200011cc

08000dd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC1_2_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_Init+0x28>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <HAL_Init+0x28>)
 8000dde:	f043 0310 	orr.w	r3, r3, #16
 8000de2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f000 f93f 	bl	8001068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dea:	200f      	movs	r0, #15
 8000dec:	f000 f808 	bl	8000e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df0:	f7ff fb6c 	bl	80004cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40022000 	.word	0x40022000

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x54>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_InitTick+0x58>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f957 	bl	80010d2 <HAL_SYSTICK_Config>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00e      	b.n	8000e4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b0f      	cmp	r3, #15
 8000e32:	d80a      	bhi.n	8000e4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e34:	2200      	movs	r2, #0
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f000 f91f 	bl	800107e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e40:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <HAL_InitTick+0x5c>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e000      	b.n	8000e4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000000 	.word	0x20000000
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000004 	.word	0x20000004

08000e60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HAL_IncTick+0x1c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_IncTick+0x20>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a03      	ldr	r2, [pc, #12]	; (8000e80 <HAL_IncTick+0x20>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	200011c8 	.word	0x200011c8

08000e84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b02      	ldr	r3, [pc, #8]	; (8000e94 <HAL_GetTick+0x10>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	200011c8 	.word	0x200011c8

08000e98 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <HAL_SuspendTick+0x18>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a03      	ldr	r2, [pc, #12]	; (8000eb0 <HAL_SuspendTick+0x18>)
 8000ea2:	f023 0302 	bic.w	r3, r3, #2
 8000ea6:	6013      	str	r3, [r2, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr
 8000eb0:	e000e010 	.word	0xe000e010

08000eb4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <HAL_ResumeTick+0x18>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a03      	ldr	r2, [pc, #12]	; (8000ecc <HAL_ResumeTick+0x18>)
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eec:	4013      	ands	r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f02:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	60d3      	str	r3, [r2, #12]
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <__NVIC_GetPriorityGrouping+0x18>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	f003 0307 	and.w	r3, r3, #7
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	db0b      	blt.n	8000f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	f003 021f 	and.w	r2, r3, #31
 8000f4c:	4906      	ldr	r1, [pc, #24]	; (8000f68 <__NVIC_EnableIRQ+0x34>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	095b      	lsrs	r3, r3, #5
 8000f54:	2001      	movs	r0, #1
 8000f56:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	e000e100 	.word	0xe000e100

08000f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	db0a      	blt.n	8000f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <__NVIC_SetPriority+0x4c>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	0112      	lsls	r2, r2, #4
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	440b      	add	r3, r1
 8000f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f94:	e00a      	b.n	8000fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4908      	ldr	r1, [pc, #32]	; (8000fbc <__NVIC_SetPriority+0x50>)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	3b04      	subs	r3, #4
 8000fa4:	0112      	lsls	r2, r2, #4
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	440b      	add	r3, r1
 8000faa:	761a      	strb	r2, [r3, #24]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000e100 	.word	0xe000e100
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f1c3 0307 	rsb	r3, r3, #7
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	bf28      	it	cs
 8000fde:	2304      	movcs	r3, #4
 8000fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d902      	bls.n	8000ff0 <NVIC_EncodePriority+0x30>
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3b03      	subs	r3, #3
 8000fee:	e000      	b.n	8000ff2 <NVIC_EncodePriority+0x32>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43da      	mvns	r2, r3
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	401a      	ands	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001008:	f04f 31ff 	mov.w	r1, #4294967295
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	43d9      	mvns	r1, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	4313      	orrs	r3, r2
         );
}
 800101a:	4618      	mov	r0, r3
 800101c:	3724      	adds	r7, #36	; 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001034:	d301      	bcc.n	800103a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001036:	2301      	movs	r3, #1
 8001038:	e00f      	b.n	800105a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <SysTick_Config+0x40>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001042:	210f      	movs	r1, #15
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f7ff ff90 	bl	8000f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <SysTick_Config+0x40>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <SysTick_Config+0x40>)
 8001054:	2207      	movs	r2, #7
 8001056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	e000e010 	.word	0xe000e010

08001068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff2d 	bl	8000ed0 <__NVIC_SetPriorityGrouping>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001090:	f7ff ff42 	bl	8000f18 <__NVIC_GetPriorityGrouping>
 8001094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	6978      	ldr	r0, [r7, #20]
 800109c:	f7ff ff90 	bl	8000fc0 <NVIC_EncodePriority>
 80010a0:	4602      	mov	r2, r0
 80010a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff5f 	bl	8000f6c <__NVIC_SetPriority>
}
 80010ae:	bf00      	nop
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff35 	bl	8000f34 <__NVIC_EnableIRQ>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffa2 	bl	8001024 <SysTick_Config>
 80010e0:	4603      	mov	r3, r0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b085      	sub	sp, #20
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d008      	beq.n	8001114 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2204      	movs	r2, #4
 8001106:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e020      	b.n	8001156 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 020e 	bic.w	r2, r2, #14
 8001122:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 0201 	bic.w	r2, r2, #1
 8001132:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800113c:	2101      	movs	r1, #1
 800113e:	fa01 f202 	lsl.w	r2, r1, r2
 8001142:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001154:	7bfb      	ldrb	r3, [r7, #15]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001168:	2300      	movs	r3, #0
 800116a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d005      	beq.n	8001184 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2204      	movs	r2, #4
 800117c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	73fb      	strb	r3, [r7, #15]
 8001182:	e051      	b.n	8001228 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 020e 	bic.w	r2, r2, #14
 8001192:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0201 	bic.w	r2, r2, #1
 80011a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a22      	ldr	r2, [pc, #136]	; (8001234 <HAL_DMA_Abort_IT+0xd4>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d029      	beq.n	8001202 <HAL_DMA_Abort_IT+0xa2>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a21      	ldr	r2, [pc, #132]	; (8001238 <HAL_DMA_Abort_IT+0xd8>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d022      	beq.n	80011fe <HAL_DMA_Abort_IT+0x9e>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a1f      	ldr	r2, [pc, #124]	; (800123c <HAL_DMA_Abort_IT+0xdc>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d01a      	beq.n	80011f8 <HAL_DMA_Abort_IT+0x98>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a1e      	ldr	r2, [pc, #120]	; (8001240 <HAL_DMA_Abort_IT+0xe0>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d012      	beq.n	80011f2 <HAL_DMA_Abort_IT+0x92>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <HAL_DMA_Abort_IT+0xe4>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d00a      	beq.n	80011ec <HAL_DMA_Abort_IT+0x8c>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <HAL_DMA_Abort_IT+0xe8>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d102      	bne.n	80011e6 <HAL_DMA_Abort_IT+0x86>
 80011e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011e4:	e00e      	b.n	8001204 <HAL_DMA_Abort_IT+0xa4>
 80011e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011ea:	e00b      	b.n	8001204 <HAL_DMA_Abort_IT+0xa4>
 80011ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f0:	e008      	b.n	8001204 <HAL_DMA_Abort_IT+0xa4>
 80011f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f6:	e005      	b.n	8001204 <HAL_DMA_Abort_IT+0xa4>
 80011f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011fc:	e002      	b.n	8001204 <HAL_DMA_Abort_IT+0xa4>
 80011fe:	2310      	movs	r3, #16
 8001200:	e000      	b.n	8001204 <HAL_DMA_Abort_IT+0xa4>
 8001202:	2301      	movs	r3, #1
 8001204:	4a11      	ldr	r2, [pc, #68]	; (800124c <HAL_DMA_Abort_IT+0xec>)
 8001206:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2201      	movs	r2, #1
 800120c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	4798      	blx	r3
    } 
  }
  return status;
 8001228:	7bfb      	ldrb	r3, [r7, #15]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40020008 	.word	0x40020008
 8001238:	4002001c 	.word	0x4002001c
 800123c:	40020030 	.word	0x40020030
 8001240:	40020044 	.word	0x40020044
 8001244:	40020058 	.word	0x40020058
 8001248:	4002006c 	.word	0x4002006c
 800124c:	40020000 	.word	0x40020000

08001250 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001250:	b480      	push	{r7}
 8001252:	b08b      	sub	sp, #44	; 0x2c
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001262:	e161      	b.n	8001528 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001264:	2201      	movs	r2, #1
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	69fa      	ldr	r2, [r7, #28]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	429a      	cmp	r2, r3
 800127e:	f040 8150 	bne.w	8001522 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	4a97      	ldr	r2, [pc, #604]	; (80014e4 <HAL_GPIO_Init+0x294>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d05e      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 800128c:	4a95      	ldr	r2, [pc, #596]	; (80014e4 <HAL_GPIO_Init+0x294>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d875      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 8001292:	4a95      	ldr	r2, [pc, #596]	; (80014e8 <HAL_GPIO_Init+0x298>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d058      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 8001298:	4a93      	ldr	r2, [pc, #588]	; (80014e8 <HAL_GPIO_Init+0x298>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d86f      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 800129e:	4a93      	ldr	r2, [pc, #588]	; (80014ec <HAL_GPIO_Init+0x29c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d052      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 80012a4:	4a91      	ldr	r2, [pc, #580]	; (80014ec <HAL_GPIO_Init+0x29c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d869      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 80012aa:	4a91      	ldr	r2, [pc, #580]	; (80014f0 <HAL_GPIO_Init+0x2a0>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d04c      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 80012b0:	4a8f      	ldr	r2, [pc, #572]	; (80014f0 <HAL_GPIO_Init+0x2a0>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d863      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 80012b6:	4a8f      	ldr	r2, [pc, #572]	; (80014f4 <HAL_GPIO_Init+0x2a4>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d046      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 80012bc:	4a8d      	ldr	r2, [pc, #564]	; (80014f4 <HAL_GPIO_Init+0x2a4>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d85d      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 80012c2:	2b12      	cmp	r3, #18
 80012c4:	d82a      	bhi.n	800131c <HAL_GPIO_Init+0xcc>
 80012c6:	2b12      	cmp	r3, #18
 80012c8:	d859      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 80012ca:	a201      	add	r2, pc, #4	; (adr r2, 80012d0 <HAL_GPIO_Init+0x80>)
 80012cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d0:	0800134b 	.word	0x0800134b
 80012d4:	08001325 	.word	0x08001325
 80012d8:	08001337 	.word	0x08001337
 80012dc:	08001379 	.word	0x08001379
 80012e0:	0800137f 	.word	0x0800137f
 80012e4:	0800137f 	.word	0x0800137f
 80012e8:	0800137f 	.word	0x0800137f
 80012ec:	0800137f 	.word	0x0800137f
 80012f0:	0800137f 	.word	0x0800137f
 80012f4:	0800137f 	.word	0x0800137f
 80012f8:	0800137f 	.word	0x0800137f
 80012fc:	0800137f 	.word	0x0800137f
 8001300:	0800137f 	.word	0x0800137f
 8001304:	0800137f 	.word	0x0800137f
 8001308:	0800137f 	.word	0x0800137f
 800130c:	0800137f 	.word	0x0800137f
 8001310:	0800137f 	.word	0x0800137f
 8001314:	0800132d 	.word	0x0800132d
 8001318:	08001341 	.word	0x08001341
 800131c:	4a76      	ldr	r2, [pc, #472]	; (80014f8 <HAL_GPIO_Init+0x2a8>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d013      	beq.n	800134a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001322:	e02c      	b.n	800137e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	623b      	str	r3, [r7, #32]
          break;
 800132a:	e029      	b.n	8001380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	3304      	adds	r3, #4
 8001332:	623b      	str	r3, [r7, #32]
          break;
 8001334:	e024      	b.n	8001380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	3308      	adds	r3, #8
 800133c:	623b      	str	r3, [r7, #32]
          break;
 800133e:	e01f      	b.n	8001380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	330c      	adds	r3, #12
 8001346:	623b      	str	r3, [r7, #32]
          break;
 8001348:	e01a      	b.n	8001380 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d102      	bne.n	8001358 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001352:	2304      	movs	r3, #4
 8001354:	623b      	str	r3, [r7, #32]
          break;
 8001356:	e013      	b.n	8001380 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d105      	bne.n	800136c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001360:	2308      	movs	r3, #8
 8001362:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	611a      	str	r2, [r3, #16]
          break;
 800136a:	e009      	b.n	8001380 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800136c:	2308      	movs	r3, #8
 800136e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69fa      	ldr	r2, [r7, #28]
 8001374:	615a      	str	r2, [r3, #20]
          break;
 8001376:	e003      	b.n	8001380 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
          break;
 800137c:	e000      	b.n	8001380 <HAL_GPIO_Init+0x130>
          break;
 800137e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	2bff      	cmp	r3, #255	; 0xff
 8001384:	d801      	bhi.n	800138a <HAL_GPIO_Init+0x13a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	e001      	b.n	800138e <HAL_GPIO_Init+0x13e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3304      	adds	r3, #4
 800138e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	2bff      	cmp	r3, #255	; 0xff
 8001394:	d802      	bhi.n	800139c <HAL_GPIO_Init+0x14c>
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	e002      	b.n	80013a2 <HAL_GPIO_Init+0x152>
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	3b08      	subs	r3, #8
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	210f      	movs	r1, #15
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	fa01 f303 	lsl.w	r3, r1, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	401a      	ands	r2, r3
 80013b4:	6a39      	ldr	r1, [r7, #32]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	fa01 f303 	lsl.w	r3, r1, r3
 80013bc:	431a      	orrs	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 80a9 	beq.w	8001522 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013d0:	4b4a      	ldr	r3, [pc, #296]	; (80014fc <HAL_GPIO_Init+0x2ac>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a49      	ldr	r2, [pc, #292]	; (80014fc <HAL_GPIO_Init+0x2ac>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b47      	ldr	r3, [pc, #284]	; (80014fc <HAL_GPIO_Init+0x2ac>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013e8:	4a45      	ldr	r2, [pc, #276]	; (8001500 <HAL_GPIO_Init+0x2b0>)
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	3302      	adds	r3, #2
 80013f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	220f      	movs	r2, #15
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	4013      	ands	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a3d      	ldr	r2, [pc, #244]	; (8001504 <HAL_GPIO_Init+0x2b4>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d00d      	beq.n	8001430 <HAL_GPIO_Init+0x1e0>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a3c      	ldr	r2, [pc, #240]	; (8001508 <HAL_GPIO_Init+0x2b8>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d007      	beq.n	800142c <HAL_GPIO_Init+0x1dc>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a3b      	ldr	r2, [pc, #236]	; (800150c <HAL_GPIO_Init+0x2bc>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d101      	bne.n	8001428 <HAL_GPIO_Init+0x1d8>
 8001424:	2302      	movs	r3, #2
 8001426:	e004      	b.n	8001432 <HAL_GPIO_Init+0x1e2>
 8001428:	2303      	movs	r3, #3
 800142a:	e002      	b.n	8001432 <HAL_GPIO_Init+0x1e2>
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <HAL_GPIO_Init+0x1e2>
 8001430:	2300      	movs	r3, #0
 8001432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001434:	f002 0203 	and.w	r2, r2, #3
 8001438:	0092      	lsls	r2, r2, #2
 800143a:	4093      	lsls	r3, r2
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	4313      	orrs	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001442:	492f      	ldr	r1, [pc, #188]	; (8001500 <HAL_GPIO_Init+0x2b0>)
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	089b      	lsrs	r3, r3, #2
 8001448:	3302      	adds	r3, #2
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d006      	beq.n	800146a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800145c:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <HAL_GPIO_Init+0x2c0>)
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	492b      	ldr	r1, [pc, #172]	; (8001510 <HAL_GPIO_Init+0x2c0>)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	608b      	str	r3, [r1, #8]
 8001468:	e006      	b.n	8001478 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800146a:	4b29      	ldr	r3, [pc, #164]	; (8001510 <HAL_GPIO_Init+0x2c0>)
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	43db      	mvns	r3, r3
 8001472:	4927      	ldr	r1, [pc, #156]	; (8001510 <HAL_GPIO_Init+0x2c0>)
 8001474:	4013      	ands	r3, r2
 8001476:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d006      	beq.n	8001492 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001484:	4b22      	ldr	r3, [pc, #136]	; (8001510 <HAL_GPIO_Init+0x2c0>)
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	4921      	ldr	r1, [pc, #132]	; (8001510 <HAL_GPIO_Init+0x2c0>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	60cb      	str	r3, [r1, #12]
 8001490:	e006      	b.n	80014a0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001492:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <HAL_GPIO_Init+0x2c0>)
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	43db      	mvns	r3, r3
 800149a:	491d      	ldr	r1, [pc, #116]	; (8001510 <HAL_GPIO_Init+0x2c0>)
 800149c:	4013      	ands	r3, r2
 800149e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d006      	beq.n	80014ba <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014ac:	4b18      	ldr	r3, [pc, #96]	; (8001510 <HAL_GPIO_Init+0x2c0>)
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	4917      	ldr	r1, [pc, #92]	; (8001510 <HAL_GPIO_Init+0x2c0>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
 80014b8:	e006      	b.n	80014c8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_GPIO_Init+0x2c0>)
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	4913      	ldr	r1, [pc, #76]	; (8001510 <HAL_GPIO_Init+0x2c0>)
 80014c4:	4013      	ands	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d01f      	beq.n	8001514 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014d4:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <HAL_GPIO_Init+0x2c0>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	490d      	ldr	r1, [pc, #52]	; (8001510 <HAL_GPIO_Init+0x2c0>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	600b      	str	r3, [r1, #0]
 80014e0:	e01f      	b.n	8001522 <HAL_GPIO_Init+0x2d2>
 80014e2:	bf00      	nop
 80014e4:	10320000 	.word	0x10320000
 80014e8:	10310000 	.word	0x10310000
 80014ec:	10220000 	.word	0x10220000
 80014f0:	10210000 	.word	0x10210000
 80014f4:	10120000 	.word	0x10120000
 80014f8:	10110000 	.word	0x10110000
 80014fc:	40021000 	.word	0x40021000
 8001500:	40010000 	.word	0x40010000
 8001504:	40010800 	.word	0x40010800
 8001508:	40010c00 	.word	0x40010c00
 800150c:	40011000 	.word	0x40011000
 8001510:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_GPIO_Init+0x2f4>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	43db      	mvns	r3, r3
 800151c:	4909      	ldr	r1, [pc, #36]	; (8001544 <HAL_GPIO_Init+0x2f4>)
 800151e:	4013      	ands	r3, r2
 8001520:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	3301      	adds	r3, #1
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	fa22 f303 	lsr.w	r3, r2, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	f47f ae96 	bne.w	8001264 <HAL_GPIO_Init+0x14>
  }
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	372c      	adds	r7, #44	; 0x2c
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	40010400 	.word	0x40010400

08001548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
 8001554:	4613      	mov	r3, r2
 8001556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001558:	787b      	ldrb	r3, [r7, #1]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001564:	e003      	b.n	800156e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	041a      	lsls	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	611a      	str	r2, [r3, #16]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4013      	ands	r3, r2
 8001590:	041a      	lsls	r2, r3, #16
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	43d9      	mvns	r1, r3
 8001596:	887b      	ldrh	r3, [r7, #2]
 8001598:	400b      	ands	r3, r1
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	611a      	str	r2, [r3, #16]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e034      	b.n	8001626 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80015c4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f245 5255 	movw	r2, #21845	; 0x5555
 80015ce:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6852      	ldr	r2, [r2, #4]
 80015d8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6892      	ldr	r2, [r2, #8]
 80015e2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80015e4:	f7ff fc4e 	bl	8000e84 <HAL_GetTick>
 80015e8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80015ea:	e00f      	b.n	800160c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80015ec:	f7ff fc4a 	bl	8000e84 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b27      	cmp	r3, #39	; 0x27
 80015f8:	d908      	bls.n	800160c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e00c      	b.n	8001626 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1e8      	bne.n	80015ec <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001622:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800163e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_PWR_EnterSLEEPMode+0x34>)
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	4a08      	ldr	r2, [pc, #32]	; (8001680 <HAL_PWR_EnterSLEEPMode+0x34>)
 800165e:	f023 0304 	bic.w	r3, r3, #4
 8001662:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d101      	bne.n	800166e <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800166a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 800166c:	e002      	b.n	8001674 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800166e:	bf40      	sev
    __WFE();
 8001670:	bf20      	wfe
    __WFE();
 8001672:	bf20      	wfe
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e272      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 8087 	beq.w	80017b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016a4:	4b92      	ldr	r3, [pc, #584]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d00c      	beq.n	80016ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016b0:	4b8f      	ldr	r3, [pc, #572]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d112      	bne.n	80016e2 <HAL_RCC_OscConfig+0x5e>
 80016bc:	4b8c      	ldr	r3, [pc, #560]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c8:	d10b      	bne.n	80016e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ca:	4b89      	ldr	r3, [pc, #548]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d06c      	beq.n	80017b0 <HAL_RCC_OscConfig+0x12c>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d168      	bne.n	80017b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e24c      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ea:	d106      	bne.n	80016fa <HAL_RCC_OscConfig+0x76>
 80016ec:	4b80      	ldr	r3, [pc, #512]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a7f      	ldr	r2, [pc, #508]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	e02e      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x98>
 8001702:	4b7b      	ldr	r3, [pc, #492]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a7a      	ldr	r2, [pc, #488]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b78      	ldr	r3, [pc, #480]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a77      	ldr	r2, [pc, #476]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e01d      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0xbc>
 8001726:	4b72      	ldr	r3, [pc, #456]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a71      	ldr	r2, [pc, #452]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800172c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	4b6f      	ldr	r3, [pc, #444]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a6e      	ldr	r2, [pc, #440]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e00b      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 8001740:	4b6b      	ldr	r3, [pc, #428]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a6a      	ldr	r2, [pc, #424]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b68      	ldr	r3, [pc, #416]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a67      	ldr	r2, [pc, #412]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001756:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d013      	beq.n	8001788 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fb90 	bl	8000e84 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff fb8c 	bl	8000e84 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e200      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	4b5d      	ldr	r3, [pc, #372]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0xe4>
 8001786:	e014      	b.n	80017b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fb7c 	bl	8000e84 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff fb78 	bl	8000e84 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e1ec      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	4b53      	ldr	r3, [pc, #332]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x10c>
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d063      	beq.n	8001886 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017be:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00b      	beq.n	80017e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017ca:	4b49      	ldr	r3, [pc, #292]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d11c      	bne.n	8001810 <HAL_RCC_OscConfig+0x18c>
 80017d6:	4b46      	ldr	r3, [pc, #280]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d116      	bne.n	8001810 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e2:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <HAL_RCC_OscConfig+0x176>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d001      	beq.n	80017fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e1c0      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fa:	4b3d      	ldr	r3, [pc, #244]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4939      	ldr	r1, [pc, #228]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180e:	e03a      	b.n	8001886 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d020      	beq.n	800185a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001818:	4b36      	ldr	r3, [pc, #216]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800181a:	2201      	movs	r2, #1
 800181c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff fb31 	bl	8000e84 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001826:	f7ff fb2d 	bl	8000e84 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e1a1      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001838:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001844:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4927      	ldr	r1, [pc, #156]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001854:	4313      	orrs	r3, r2
 8001856:	600b      	str	r3, [r1, #0]
 8001858:	e015      	b.n	8001886 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800185a:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff fb10 	bl	8000e84 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001868:	f7ff fb0c 	bl	8000e84 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e180      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d03a      	beq.n	8001908 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d019      	beq.n	80018ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <HAL_RCC_OscConfig+0x274>)
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a0:	f7ff faf0 	bl	8000e84 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a8:	f7ff faec 	bl	8000e84 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e160      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ba:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018c6:	2001      	movs	r0, #1
 80018c8:	f000 face 	bl	8001e68 <RCC_Delay>
 80018cc:	e01c      	b.n	8001908 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_RCC_OscConfig+0x274>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d4:	f7ff fad6 	bl	8000e84 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018da:	e00f      	b.n	80018fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018dc:	f7ff fad2 	bl	8000e84 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d908      	bls.n	80018fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e146      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	42420000 	.word	0x42420000
 80018f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018fc:	4b92      	ldr	r3, [pc, #584]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1e9      	bne.n	80018dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 80a6 	beq.w	8001a62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800191a:	4b8b      	ldr	r3, [pc, #556]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10d      	bne.n	8001942 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	4b88      	ldr	r3, [pc, #544]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a87      	ldr	r2, [pc, #540]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	61d3      	str	r3, [r2, #28]
 8001932:	4b85      	ldr	r3, [pc, #532]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193e:	2301      	movs	r3, #1
 8001940:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001942:	4b82      	ldr	r3, [pc, #520]	; (8001b4c <HAL_RCC_OscConfig+0x4c8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194a:	2b00      	cmp	r3, #0
 800194c:	d118      	bne.n	8001980 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194e:	4b7f      	ldr	r3, [pc, #508]	; (8001b4c <HAL_RCC_OscConfig+0x4c8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a7e      	ldr	r2, [pc, #504]	; (8001b4c <HAL_RCC_OscConfig+0x4c8>)
 8001954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800195a:	f7ff fa93 	bl	8000e84 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001962:	f7ff fa8f 	bl	8000e84 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b64      	cmp	r3, #100	; 0x64
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e103      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001974:	4b75      	ldr	r3, [pc, #468]	; (8001b4c <HAL_RCC_OscConfig+0x4c8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d106      	bne.n	8001996 <HAL_RCC_OscConfig+0x312>
 8001988:	4b6f      	ldr	r3, [pc, #444]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4a6e      	ldr	r2, [pc, #440]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6213      	str	r3, [r2, #32]
 8001994:	e02d      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x334>
 800199e:	4b6a      	ldr	r3, [pc, #424]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	4a69      	ldr	r2, [pc, #420]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019a4:	f023 0301 	bic.w	r3, r3, #1
 80019a8:	6213      	str	r3, [r2, #32]
 80019aa:	4b67      	ldr	r3, [pc, #412]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	4a66      	ldr	r2, [pc, #408]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	f023 0304 	bic.w	r3, r3, #4
 80019b4:	6213      	str	r3, [r2, #32]
 80019b6:	e01c      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d10c      	bne.n	80019da <HAL_RCC_OscConfig+0x356>
 80019c0:	4b61      	ldr	r3, [pc, #388]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4a60      	ldr	r2, [pc, #384]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	6213      	str	r3, [r2, #32]
 80019cc:	4b5e      	ldr	r3, [pc, #376]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a5d      	ldr	r2, [pc, #372]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6213      	str	r3, [r2, #32]
 80019d8:	e00b      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 80019da:	4b5b      	ldr	r3, [pc, #364]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	4a5a      	ldr	r2, [pc, #360]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	6213      	str	r3, [r2, #32]
 80019e6:	4b58      	ldr	r3, [pc, #352]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4a57      	ldr	r2, [pc, #348]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	f023 0304 	bic.w	r3, r3, #4
 80019f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d015      	beq.n	8001a26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fa:	f7ff fa43 	bl	8000e84 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a00:	e00a      	b.n	8001a18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a02:	f7ff fa3f 	bl	8000e84 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e0b1      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a18:	4b4b      	ldr	r3, [pc, #300]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0ee      	beq.n	8001a02 <HAL_RCC_OscConfig+0x37e>
 8001a24:	e014      	b.n	8001a50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a26:	f7ff fa2d 	bl	8000e84 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a2c:	e00a      	b.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7ff fa29 	bl	8000e84 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e09b      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a44:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1ee      	bne.n	8001a2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a50:	7dfb      	ldrb	r3, [r7, #23]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d105      	bne.n	8001a62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a56:	4b3c      	ldr	r3, [pc, #240]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a3b      	ldr	r2, [pc, #236]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 8087 	beq.w	8001b7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a6c:	4b36      	ldr	r3, [pc, #216]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d061      	beq.n	8001b3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d146      	bne.n	8001b0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a80:	4b33      	ldr	r3, [pc, #204]	; (8001b50 <HAL_RCC_OscConfig+0x4cc>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7ff f9fd 	bl	8000e84 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7ff f9f9 	bl	8000e84 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e06d      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa0:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab4:	d108      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ab6:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	4921      	ldr	r1, [pc, #132]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac8:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a19      	ldr	r1, [r3, #32]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	491b      	ldr	r1, [pc, #108]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <HAL_RCC_OscConfig+0x4cc>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae6:	f7ff f9cd 	bl	8000e84 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aee:	f7ff f9c9 	bl	8000e84 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e03d      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x46a>
 8001b0c:	e035      	b.n	8001b7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <HAL_RCC_OscConfig+0x4cc>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff f9b6 	bl	8000e84 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1c:	f7ff f9b2 	bl	8000e84 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e026      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x498>
 8001b3a:	e01e      	b.n	8001b7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d107      	bne.n	8001b54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e019      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40007000 	.word	0x40007000
 8001b50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_OscConfig+0x500>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d106      	bne.n	8001b76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d001      	beq.n	8001b7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40021000 	.word	0x40021000

08001b88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0d0      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b9c:	4b6a      	ldr	r3, [pc, #424]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d910      	bls.n	8001bcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001baa:	4b67      	ldr	r3, [pc, #412]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f023 0207 	bic.w	r2, r3, #7
 8001bb2:	4965      	ldr	r1, [pc, #404]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bba:	4b63      	ldr	r3, [pc, #396]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0b8      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d020      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be4:	4b59      	ldr	r3, [pc, #356]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	4a58      	ldr	r2, [pc, #352]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bfc:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4a52      	ldr	r2, [pc, #328]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c08:	4b50      	ldr	r3, [pc, #320]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	494d      	ldr	r1, [pc, #308]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d040      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d107      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d115      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e07f      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d107      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c46:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d109      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e073      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c56:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e06b      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c66:	4b39      	ldr	r3, [pc, #228]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f023 0203 	bic.w	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	4936      	ldr	r1, [pc, #216]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c78:	f7ff f904 	bl	8000e84 <HAL_GetTick>
 8001c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7e:	e00a      	b.n	8001c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c80:	f7ff f900 	bl	8000e84 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e053      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 020c 	and.w	r2, r3, #12
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d1eb      	bne.n	8001c80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca8:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d210      	bcs.n	8001cd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 0207 	bic.w	r2, r3, #7
 8001cbe:	4922      	ldr	r1, [pc, #136]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc6:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e032      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce4:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	4916      	ldr	r1, [pc, #88]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d009      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d02:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	490e      	ldr	r1, [pc, #56]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d16:	f000 f821 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	490a      	ldr	r1, [pc, #40]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001d28:	5ccb      	ldrb	r3, [r1, r3]
 8001d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2e:	4a09      	ldr	r2, [pc, #36]	; (8001d54 <HAL_RCC_ClockConfig+0x1cc>)
 8001d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_RCC_ClockConfig+0x1d0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff f862 	bl	8000e00 <HAL_InitTick>

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40022000 	.word	0x40022000
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	08003148 	.word	0x08003148
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000004 	.word	0x20000004

08001d5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d76:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d002      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x30>
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d003      	beq.n	8001d92 <HAL_RCC_GetSysClockFreq+0x36>
 8001d8a:	e027      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d8c:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d8e:	613b      	str	r3, [r7, #16]
      break;
 8001d90:	e027      	b.n	8001de2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	0c9b      	lsrs	r3, r3, #18
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	4a17      	ldr	r2, [pc, #92]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d9c:	5cd3      	ldrb	r3, [r2, r3]
 8001d9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d010      	beq.n	8001dcc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	0c5b      	lsrs	r3, r3, #17
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	4a11      	ldr	r2, [pc, #68]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001db6:	5cd3      	ldrb	r3, [r2, r3]
 8001db8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dbe:	fb03 f202 	mul.w	r2, r3, r2
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	e004      	b.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a0c      	ldr	r2, [pc, #48]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001dd0:	fb02 f303 	mul.w	r3, r2, r3
 8001dd4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	613b      	str	r3, [r7, #16]
      break;
 8001dda:	e002      	b.n	8001de2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dde:	613b      	str	r3, [r7, #16]
      break;
 8001de0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001de2:	693b      	ldr	r3, [r7, #16]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	371c      	adds	r7, #28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	007a1200 	.word	0x007a1200
 8001df8:	08003160 	.word	0x08003160
 8001dfc:	08003170 	.word	0x08003170
 8001e00:	003d0900 	.word	0x003d0900

08001e04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e08:	4b02      	ldr	r3, [pc, #8]	; (8001e14 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	20000000 	.word	0x20000000

08001e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e1c:	f7ff fff2 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	0a1b      	lsrs	r3, r3, #8
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	4903      	ldr	r1, [pc, #12]	; (8001e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	08003158 	.word	0x08003158

08001e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e44:	f7ff ffde 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	0adb      	lsrs	r3, r3, #11
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	4903      	ldr	r1, [pc, #12]	; (8001e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e56:	5ccb      	ldrb	r3, [r1, r3]
 8001e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021000 	.word	0x40021000
 8001e64:	08003158 	.word	0x08003158

08001e68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e70:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <RCC_Delay+0x34>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <RCC_Delay+0x38>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	0a5b      	lsrs	r3, r3, #9
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	fb02 f303 	mul.w	r3, r2, r3
 8001e82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e84:	bf00      	nop
  }
  while (Delay --);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1e5a      	subs	r2, r3, #1
 8001e8a:	60fa      	str	r2, [r7, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f9      	bne.n	8001e84 <RCC_Delay+0x1c>
}
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	10624dd3 	.word	0x10624dd3

08001ea4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e041      	b.n	8001f3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d106      	bne.n	8001ed0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7fe fb20 	bl	8000510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3304      	adds	r3, #4
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	f000 fa6e 	bl	80023c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d001      	beq.n	8001f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e035      	b.n	8001fc8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a16      	ldr	r2, [pc, #88]	; (8001fd4 <HAL_TIM_Base_Start_IT+0x90>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d009      	beq.n	8001f92 <HAL_TIM_Base_Start_IT+0x4e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f86:	d004      	beq.n	8001f92 <HAL_TIM_Base_Start_IT+0x4e>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <HAL_TIM_Base_Start_IT+0x94>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d111      	bne.n	8001fb6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2b06      	cmp	r3, #6
 8001fa2:	d010      	beq.n	8001fc6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fb4:	e007      	b.n	8001fc6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f042 0201 	orr.w	r2, r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40012c00 	.word	0x40012c00
 8001fd8:	40000400 	.word	0x40000400

08001fdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d122      	bne.n	8002038 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d11b      	bne.n	8002038 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0202 	mvn.w	r2, #2
 8002008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f9b4 	bl	800238c <HAL_TIM_IC_CaptureCallback>
 8002024:	e005      	b.n	8002032 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f9a7 	bl	800237a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f9b6 	bl	800239e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b04      	cmp	r3, #4
 8002044:	d122      	bne.n	800208c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b04      	cmp	r3, #4
 8002052:	d11b      	bne.n	800208c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f06f 0204 	mvn.w	r2, #4
 800205c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2202      	movs	r2, #2
 8002062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f98a 	bl	800238c <HAL_TIM_IC_CaptureCallback>
 8002078:	e005      	b.n	8002086 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f97d 	bl	800237a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f98c 	bl	800239e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b08      	cmp	r3, #8
 8002098:	d122      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d11b      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0208 	mvn.w	r2, #8
 80020b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2204      	movs	r2, #4
 80020b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f960 	bl	800238c <HAL_TIM_IC_CaptureCallback>
 80020cc:	e005      	b.n	80020da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f953 	bl	800237a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f962 	bl	800239e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 0310 	and.w	r3, r3, #16
 80020ea:	2b10      	cmp	r3, #16
 80020ec:	d122      	bne.n	8002134 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b10      	cmp	r3, #16
 80020fa:	d11b      	bne.n	8002134 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0210 	mvn.w	r2, #16
 8002104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2208      	movs	r2, #8
 800210a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f936 	bl	800238c <HAL_TIM_IC_CaptureCallback>
 8002120:	e005      	b.n	800212e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f929 	bl	800237a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f938 	bl	800239e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b01      	cmp	r3, #1
 8002140:	d10e      	bne.n	8002160 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b01      	cmp	r3, #1
 800214e:	d107      	bne.n	8002160 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0201 	mvn.w	r2, #1
 8002158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7fe f968 	bl	8000430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216a:	2b80      	cmp	r3, #128	; 0x80
 800216c:	d10e      	bne.n	800218c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002178:	2b80      	cmp	r3, #128	; 0x80
 800217a:	d107      	bne.n	800218c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 fa6b 	bl	8002662 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002196:	2b40      	cmp	r3, #64	; 0x40
 8002198:	d10e      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a4:	2b40      	cmp	r3, #64	; 0x40
 80021a6:	d107      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f8fc 	bl	80023b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	d10e      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f003 0320 	and.w	r3, r3, #32
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	d107      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0220 	mvn.w	r2, #32
 80021dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 fa36 	bl	8002650 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_TIM_ConfigClockSource+0x1c>
 8002204:	2302      	movs	r3, #2
 8002206:	e0b4      	b.n	8002372 <HAL_TIM_ConfigClockSource+0x186>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800222e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002240:	d03e      	beq.n	80022c0 <HAL_TIM_ConfigClockSource+0xd4>
 8002242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002246:	f200 8087 	bhi.w	8002358 <HAL_TIM_ConfigClockSource+0x16c>
 800224a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800224e:	f000 8086 	beq.w	800235e <HAL_TIM_ConfigClockSource+0x172>
 8002252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002256:	d87f      	bhi.n	8002358 <HAL_TIM_ConfigClockSource+0x16c>
 8002258:	2b70      	cmp	r3, #112	; 0x70
 800225a:	d01a      	beq.n	8002292 <HAL_TIM_ConfigClockSource+0xa6>
 800225c:	2b70      	cmp	r3, #112	; 0x70
 800225e:	d87b      	bhi.n	8002358 <HAL_TIM_ConfigClockSource+0x16c>
 8002260:	2b60      	cmp	r3, #96	; 0x60
 8002262:	d050      	beq.n	8002306 <HAL_TIM_ConfigClockSource+0x11a>
 8002264:	2b60      	cmp	r3, #96	; 0x60
 8002266:	d877      	bhi.n	8002358 <HAL_TIM_ConfigClockSource+0x16c>
 8002268:	2b50      	cmp	r3, #80	; 0x50
 800226a:	d03c      	beq.n	80022e6 <HAL_TIM_ConfigClockSource+0xfa>
 800226c:	2b50      	cmp	r3, #80	; 0x50
 800226e:	d873      	bhi.n	8002358 <HAL_TIM_ConfigClockSource+0x16c>
 8002270:	2b40      	cmp	r3, #64	; 0x40
 8002272:	d058      	beq.n	8002326 <HAL_TIM_ConfigClockSource+0x13a>
 8002274:	2b40      	cmp	r3, #64	; 0x40
 8002276:	d86f      	bhi.n	8002358 <HAL_TIM_ConfigClockSource+0x16c>
 8002278:	2b30      	cmp	r3, #48	; 0x30
 800227a:	d064      	beq.n	8002346 <HAL_TIM_ConfigClockSource+0x15a>
 800227c:	2b30      	cmp	r3, #48	; 0x30
 800227e:	d86b      	bhi.n	8002358 <HAL_TIM_ConfigClockSource+0x16c>
 8002280:	2b20      	cmp	r3, #32
 8002282:	d060      	beq.n	8002346 <HAL_TIM_ConfigClockSource+0x15a>
 8002284:	2b20      	cmp	r3, #32
 8002286:	d867      	bhi.n	8002358 <HAL_TIM_ConfigClockSource+0x16c>
 8002288:	2b00      	cmp	r3, #0
 800228a:	d05c      	beq.n	8002346 <HAL_TIM_ConfigClockSource+0x15a>
 800228c:	2b10      	cmp	r3, #16
 800228e:	d05a      	beq.n	8002346 <HAL_TIM_ConfigClockSource+0x15a>
 8002290:	e062      	b.n	8002358 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6899      	ldr	r1, [r3, #8]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	f000 f95e 	bl	8002562 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80022b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	609a      	str	r2, [r3, #8]
      break;
 80022be:	e04f      	b.n	8002360 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6818      	ldr	r0, [r3, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	6899      	ldr	r1, [r3, #8]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f000 f947 	bl	8002562 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022e2:	609a      	str	r2, [r3, #8]
      break;
 80022e4:	e03c      	b.n	8002360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	6859      	ldr	r1, [r3, #4]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	461a      	mov	r2, r3
 80022f4:	f000 f8be 	bl	8002474 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2150      	movs	r1, #80	; 0x50
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 f915 	bl	800252e <TIM_ITRx_SetConfig>
      break;
 8002304:	e02c      	b.n	8002360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6818      	ldr	r0, [r3, #0]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6859      	ldr	r1, [r3, #4]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	461a      	mov	r2, r3
 8002314:	f000 f8dc 	bl	80024d0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2160      	movs	r1, #96	; 0x60
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f905 	bl	800252e <TIM_ITRx_SetConfig>
      break;
 8002324:	e01c      	b.n	8002360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	6859      	ldr	r1, [r3, #4]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	461a      	mov	r2, r3
 8002334:	f000 f89e 	bl	8002474 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2140      	movs	r1, #64	; 0x40
 800233e:	4618      	mov	r0, r3
 8002340:	f000 f8f5 	bl	800252e <TIM_ITRx_SetConfig>
      break;
 8002344:	e00c      	b.n	8002360 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4619      	mov	r1, r3
 8002350:	4610      	mov	r0, r2
 8002352:	f000 f8ec 	bl	800252e <TIM_ITRx_SetConfig>
      break;
 8002356:	e003      	b.n	8002360 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	73fb      	strb	r3, [r7, #15]
      break;
 800235c:	e000      	b.n	8002360 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800235e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002370:	7bfb      	ldrb	r3, [r7, #15]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
	...

080023c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a25      	ldr	r2, [pc, #148]	; (800246c <TIM_Base_SetConfig+0xa8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d007      	beq.n	80023ec <TIM_Base_SetConfig+0x28>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e2:	d003      	beq.n	80023ec <TIM_Base_SetConfig+0x28>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a22      	ldr	r2, [pc, #136]	; (8002470 <TIM_Base_SetConfig+0xac>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d108      	bne.n	80023fe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a1a      	ldr	r2, [pc, #104]	; (800246c <TIM_Base_SetConfig+0xa8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d007      	beq.n	8002416 <TIM_Base_SetConfig+0x52>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240c:	d003      	beq.n	8002416 <TIM_Base_SetConfig+0x52>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a17      	ldr	r2, [pc, #92]	; (8002470 <TIM_Base_SetConfig+0xac>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d108      	bne.n	8002428 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800241c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4313      	orrs	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	4313      	orrs	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a07      	ldr	r2, [pc, #28]	; (800246c <TIM_Base_SetConfig+0xa8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d103      	bne.n	800245c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	615a      	str	r2, [r3, #20]
}
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	40012c00 	.word	0x40012c00
 8002470:	40000400 	.word	0x40000400

08002474 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002474:	b480      	push	{r7}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	f023 0201 	bic.w	r2, r3, #1
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800249e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f023 030a 	bic.w	r3, r3, #10
 80024b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	621a      	str	r2, [r3, #32]
}
 80024c6:	bf00      	nop
 80024c8:	371c      	adds	r7, #28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	f023 0210 	bic.w	r2, r3, #16
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	031b      	lsls	r3, r3, #12
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800250c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4313      	orrs	r3, r2
 8002516:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	621a      	str	r2, [r3, #32]
}
 8002524:	bf00      	nop
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr

0800252e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800252e:	b480      	push	{r7}
 8002530:	b085      	sub	sp, #20
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002544:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4313      	orrs	r3, r2
 800254c:	f043 0307 	orr.w	r3, r3, #7
 8002550:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	609a      	str	r2, [r3, #8]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr

08002562 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002562:	b480      	push	{r7}
 8002564:	b087      	sub	sp, #28
 8002566:	af00      	add	r7, sp, #0
 8002568:	60f8      	str	r0, [r7, #12]
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	607a      	str	r2, [r7, #4]
 800256e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800257c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	021a      	lsls	r2, r3, #8
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	431a      	orrs	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	4313      	orrs	r3, r2
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4313      	orrs	r3, r2
 800258e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	609a      	str	r2, [r3, #8]
}
 8002596:	bf00      	nop
 8002598:	371c      	adds	r7, #28
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e041      	b.n	800263c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2202      	movs	r2, #2
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a14      	ldr	r2, [pc, #80]	; (8002648 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d009      	beq.n	8002610 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002604:	d004      	beq.n	8002610 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a10      	ldr	r2, [pc, #64]	; (800264c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d10c      	bne.n	800262a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002616:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	4313      	orrs	r3, r2
 8002620:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40012c00 	.word	0x40012c00
 800264c:	40000400 	.word	0x40000400

08002650 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr

08002662 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e042      	b.n	800270c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d106      	bne.n	80026a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7fd ff5c 	bl	8000558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2224      	movs	r2, #36	; 0x24
 80026a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 fc7f 	bl	8002fbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695a      	ldr	r2, [r3, #20]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b0ba      	sub	sp, #232	; 0xe8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800273a:	2300      	movs	r3, #0
 800273c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002740:	2300      	movs	r3, #0
 8002742:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002752:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10f      	bne.n	800277a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800275a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	2b00      	cmp	r3, #0
 8002764:	d009      	beq.n	800277a <HAL_UART_IRQHandler+0x66>
 8002766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800276a:	f003 0320 	and.w	r3, r3, #32
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fb63 	bl	8002e3e <UART_Receive_IT>
      return;
 8002778:	e25b      	b.n	8002c32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800277a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 80de 	beq.w	8002940 <HAL_UART_IRQHandler+0x22c>
 8002784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d106      	bne.n	800279e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002794:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80d1 	beq.w	8002940 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800279e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00b      	beq.n	80027c2 <HAL_UART_IRQHandler+0xae>
 80027aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	f043 0201 	orr.w	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00b      	beq.n	80027e6 <HAL_UART_IRQHandler+0xd2>
 80027ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	f043 0202 	orr.w	r2, r3, #2
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00b      	beq.n	800280a <HAL_UART_IRQHandler+0xf6>
 80027f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	f043 0204 	orr.w	r2, r3, #4
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800280a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d011      	beq.n	800283a <HAL_UART_IRQHandler+0x126>
 8002816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800281a:	f003 0320 	and.w	r3, r3, #32
 800281e:	2b00      	cmp	r3, #0
 8002820:	d105      	bne.n	800282e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d005      	beq.n	800283a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	f043 0208 	orr.w	r2, r3, #8
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 81f2 	beq.w	8002c28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002848:	f003 0320 	and.w	r3, r3, #32
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <HAL_UART_IRQHandler+0x14e>
 8002850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 faee 	bl	8002e3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286c:	2b00      	cmp	r3, #0
 800286e:	bf14      	ite	ne
 8002870:	2301      	movne	r3, #1
 8002872:	2300      	moveq	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d103      	bne.n	800288e <HAL_UART_IRQHandler+0x17a>
 8002886:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800288a:	2b00      	cmp	r3, #0
 800288c:	d04f      	beq.n	800292e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f9f8 	bl	8002c84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d041      	beq.n	8002926 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	3314      	adds	r3, #20
 80028a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028b0:	e853 3f00 	ldrex	r3, [r3]
 80028b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80028b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	3314      	adds	r3, #20
 80028ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80028ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80028d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80028da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80028de:	e841 2300 	strex	r3, r2, [r1]
 80028e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80028e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1d9      	bne.n	80028a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d013      	beq.n	800291e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fa:	4a7e      	ldr	r2, [pc, #504]	; (8002af4 <HAL_UART_IRQHandler+0x3e0>)
 80028fc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002902:	4618      	mov	r0, r3
 8002904:	f7fe fc2c 	bl	8001160 <HAL_DMA_Abort_IT>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d016      	beq.n	800293c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002918:	4610      	mov	r0, r2
 800291a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800291c:	e00e      	b.n	800293c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f99c 	bl	8002c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002924:	e00a      	b.n	800293c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f998 	bl	8002c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800292c:	e006      	b.n	800293c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f994 	bl	8002c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800293a:	e175      	b.n	8002c28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800293c:	bf00      	nop
    return;
 800293e:	e173      	b.n	8002c28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	2b01      	cmp	r3, #1
 8002946:	f040 814f 	bne.w	8002be8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800294a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800294e:	f003 0310 	and.w	r3, r3, #16
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 8148 	beq.w	8002be8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800295c:	f003 0310 	and.w	r3, r3, #16
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8141 	beq.w	8002be8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002966:	2300      	movs	r3, #0
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80b6 	beq.w	8002af8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002998:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 8145 	beq.w	8002c2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029aa:	429a      	cmp	r2, r3
 80029ac:	f080 813e 	bcs.w	8002c2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	2b20      	cmp	r3, #32
 80029c0:	f000 8088 	beq.w	8002ad4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	330c      	adds	r3, #12
 80029ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029d2:	e853 3f00 	ldrex	r3, [r3]
 80029d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80029da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	330c      	adds	r3, #12
 80029ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80029f0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80029fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a00:	e841 2300 	strex	r3, r2, [r1]
 8002a04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1d9      	bne.n	80029c4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	3314      	adds	r3, #20
 8002a16:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a1a:	e853 3f00 	ldrex	r3, [r3]
 8002a1e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a22:	f023 0301 	bic.w	r3, r3, #1
 8002a26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	3314      	adds	r3, #20
 8002a30:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a34:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a38:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a40:	e841 2300 	strex	r3, r2, [r1]
 8002a44:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1e1      	bne.n	8002a10 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3314      	adds	r3, #20
 8002a52:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a56:	e853 3f00 	ldrex	r3, [r3]
 8002a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	3314      	adds	r3, #20
 8002a6c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a70:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a74:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a78:	e841 2300 	strex	r3, r2, [r1]
 8002a7c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1e3      	bne.n	8002a4c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	330c      	adds	r3, #12
 8002a98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a9c:	e853 3f00 	ldrex	r3, [r3]
 8002aa0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aa4:	f023 0310 	bic.w	r3, r3, #16
 8002aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	330c      	adds	r3, #12
 8002ab2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002ab6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ab8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002abc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002abe:	e841 2300 	strex	r3, r2, [r1]
 8002ac2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1e3      	bne.n	8002a92 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe fb0b 	bl	80010ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	4619      	mov	r1, r3
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f8bf 	bl	8002c6e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002af0:	e09c      	b.n	8002c2c <HAL_UART_IRQHandler+0x518>
 8002af2:	bf00      	nop
 8002af4:	08002d49 	.word	0x08002d49
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 808e 	beq.w	8002c30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002b14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 8089 	beq.w	8002c30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	330c      	adds	r3, #12
 8002b24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b28:	e853 3f00 	ldrex	r3, [r3]
 8002b2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002b42:	647a      	str	r2, [r7, #68]	; 0x44
 8002b44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b4a:	e841 2300 	strex	r3, r2, [r1]
 8002b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1e3      	bne.n	8002b1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3314      	adds	r3, #20
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	e853 3f00 	ldrex	r3, [r3]
 8002b64:	623b      	str	r3, [r7, #32]
   return(result);
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	f023 0301 	bic.w	r3, r3, #1
 8002b6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3314      	adds	r3, #20
 8002b76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b7a:	633a      	str	r2, [r7, #48]	; 0x30
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b82:	e841 2300 	strex	r3, r2, [r1]
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1e3      	bne.n	8002b56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	330c      	adds	r3, #12
 8002ba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	e853 3f00 	ldrex	r3, [r3]
 8002baa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f023 0310 	bic.w	r3, r3, #16
 8002bb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	330c      	adds	r3, #12
 8002bbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002bc0:	61fa      	str	r2, [r7, #28]
 8002bc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc4:	69b9      	ldr	r1, [r7, #24]
 8002bc6:	69fa      	ldr	r2, [r7, #28]
 8002bc8:	e841 2300 	strex	r3, r2, [r1]
 8002bcc:	617b      	str	r3, [r7, #20]
   return(result);
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1e3      	bne.n	8002b9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002bde:	4619      	mov	r1, r3
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f844 	bl	8002c6e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002be6:	e023      	b.n	8002c30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d009      	beq.n	8002c08 <HAL_UART_IRQHandler+0x4f4>
 8002bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f8b5 	bl	8002d70 <UART_Transmit_IT>
    return;
 8002c06:	e014      	b.n	8002c32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00e      	beq.n	8002c32 <HAL_UART_IRQHandler+0x51e>
 8002c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f8f4 	bl	8002e0e <UART_EndTransmit_IT>
    return;
 8002c26:	e004      	b.n	8002c32 <HAL_UART_IRQHandler+0x51e>
    return;
 8002c28:	bf00      	nop
 8002c2a:	e002      	b.n	8002c32 <HAL_UART_IRQHandler+0x51e>
      return;
 8002c2c:	bf00      	nop
 8002c2e:	e000      	b.n	8002c32 <HAL_UART_IRQHandler+0x51e>
      return;
 8002c30:	bf00      	nop
  }
}
 8002c32:	37e8      	adds	r7, #232	; 0xe8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr

08002c4a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr

08002c6e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	460b      	mov	r3, r1
 8002c78:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b095      	sub	sp, #84	; 0x54
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	330c      	adds	r3, #12
 8002c92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c96:	e853 3f00 	ldrex	r3, [r3]
 8002c9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	330c      	adds	r3, #12
 8002caa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cac:	643a      	str	r2, [r7, #64]	; 0x40
 8002cae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002cb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002cb4:	e841 2300 	strex	r3, r2, [r1]
 8002cb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1e5      	bne.n	8002c8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	3314      	adds	r3, #20
 8002cc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	e853 3f00 	ldrex	r3, [r3]
 8002cce:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f023 0301 	bic.w	r3, r3, #1
 8002cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3314      	adds	r3, #20
 8002cde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ce0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ce8:	e841 2300 	strex	r3, r2, [r1]
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1e5      	bne.n	8002cc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d119      	bne.n	8002d30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	330c      	adds	r3, #12
 8002d02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	e853 3f00 	ldrex	r3, [r3]
 8002d0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f023 0310 	bic.w	r3, r3, #16
 8002d12:	647b      	str	r3, [r7, #68]	; 0x44
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	330c      	adds	r3, #12
 8002d1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d1c:	61ba      	str	r2, [r7, #24]
 8002d1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d20:	6979      	ldr	r1, [r7, #20]
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	e841 2300 	strex	r3, r2, [r1]
 8002d28:	613b      	str	r3, [r7, #16]
   return(result);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e5      	bne.n	8002cfc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d3e:	bf00      	nop
 8002d40:	3754      	adds	r7, #84	; 0x54
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f7ff ff7a 	bl	8002c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d68:	bf00      	nop
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b21      	cmp	r3, #33	; 0x21
 8002d82:	d13e      	bne.n	8002e02 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d8c:	d114      	bne.n	8002db8 <UART_Transmit_IT+0x48>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d110      	bne.n	8002db8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002daa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	1c9a      	adds	r2, r3, #2
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	621a      	str	r2, [r3, #32]
 8002db6:	e008      	b.n	8002dca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	1c59      	adds	r1, r3, #1
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6211      	str	r1, [r2, #32]
 8002dc2:	781a      	ldrb	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10f      	bne.n	8002dfe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dfc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	e000      	b.n	8002e04 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e02:	2302      	movs	r3, #2
  }
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff ff02 	bl	8002c38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b08c      	sub	sp, #48	; 0x30
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b22      	cmp	r3, #34	; 0x22
 8002e50:	f040 80ae 	bne.w	8002fb0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e5c:	d117      	bne.n	8002e8e <UART_Receive_IT+0x50>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d113      	bne.n	8002e8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	1c9a      	adds	r2, r3, #2
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e8c:	e026      	b.n	8002edc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea0:	d007      	beq.n	8002eb2 <UART_Receive_IT+0x74>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10a      	bne.n	8002ec0 <UART_Receive_IT+0x82>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebc:	701a      	strb	r2, [r3, #0]
 8002ebe:	e008      	b.n	8002ed2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4619      	mov	r1, r3
 8002eea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d15d      	bne.n	8002fac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0220 	bic.w	r2, r2, #32
 8002efe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695a      	ldr	r2, [r3, #20]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0201 	bic.w	r2, r2, #1
 8002f1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d135      	bne.n	8002fa2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	330c      	adds	r3, #12
 8002f42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	e853 3f00 	ldrex	r3, [r3]
 8002f4a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f023 0310 	bic.w	r3, r3, #16
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	330c      	adds	r3, #12
 8002f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5c:	623a      	str	r2, [r7, #32]
 8002f5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f60:	69f9      	ldr	r1, [r7, #28]
 8002f62:	6a3a      	ldr	r2, [r7, #32]
 8002f64:	e841 2300 	strex	r3, r2, [r1]
 8002f68:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e5      	bne.n	8002f3c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	2b10      	cmp	r3, #16
 8002f7c:	d10a      	bne.n	8002f94 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f98:	4619      	mov	r1, r3
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff fe67 	bl	8002c6e <HAL_UARTEx_RxEventCallback>
 8002fa0:	e002      	b.n	8002fa8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff fe51 	bl	8002c4a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	e002      	b.n	8002fb2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e000      	b.n	8002fb2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002fb0:	2302      	movs	r3, #2
  }
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3730      	adds	r7, #48	; 0x30
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ff6:	f023 030c 	bic.w	r3, r3, #12
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	68b9      	ldr	r1, [r7, #8]
 8003000:	430b      	orrs	r3, r1
 8003002:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699a      	ldr	r2, [r3, #24]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a2c      	ldr	r2, [pc, #176]	; (80030d0 <UART_SetConfig+0x114>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d103      	bne.n	800302c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003024:	f7fe ff0c 	bl	8001e40 <HAL_RCC_GetPCLK2Freq>
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	e002      	b.n	8003032 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800302c:	f7fe fef4 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 8003030:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	009a      	lsls	r2, r3, #2
 800303c:	441a      	add	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	fbb2 f3f3 	udiv	r3, r2, r3
 8003048:	4a22      	ldr	r2, [pc, #136]	; (80030d4 <UART_SetConfig+0x118>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	0119      	lsls	r1, r3, #4
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	009a      	lsls	r2, r3, #2
 800305c:	441a      	add	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	fbb2 f2f3 	udiv	r2, r2, r3
 8003068:	4b1a      	ldr	r3, [pc, #104]	; (80030d4 <UART_SetConfig+0x118>)
 800306a:	fba3 0302 	umull	r0, r3, r3, r2
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	2064      	movs	r0, #100	; 0x64
 8003072:	fb00 f303 	mul.w	r3, r0, r3
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	3332      	adds	r3, #50	; 0x32
 800307c:	4a15      	ldr	r2, [pc, #84]	; (80030d4 <UART_SetConfig+0x118>)
 800307e:	fba2 2303 	umull	r2, r3, r2, r3
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003088:	4419      	add	r1, r3
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	009a      	lsls	r2, r3, #2
 8003094:	441a      	add	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	fbb2 f2f3 	udiv	r2, r2, r3
 80030a0:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <UART_SetConfig+0x118>)
 80030a2:	fba3 0302 	umull	r0, r3, r3, r2
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	2064      	movs	r0, #100	; 0x64
 80030aa:	fb00 f303 	mul.w	r3, r0, r3
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	3332      	adds	r3, #50	; 0x32
 80030b4:	4a07      	ldr	r2, [pc, #28]	; (80030d4 <UART_SetConfig+0x118>)
 80030b6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	f003 020f 	and.w	r2, r3, #15
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	440a      	add	r2, r1
 80030c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40013800 	.word	0x40013800
 80030d4:	51eb851f 	.word	0x51eb851f

080030d8 <__libc_init_array>:
 80030d8:	b570      	push	{r4, r5, r6, lr}
 80030da:	2600      	movs	r6, #0
 80030dc:	4d0c      	ldr	r5, [pc, #48]	; (8003110 <__libc_init_array+0x38>)
 80030de:	4c0d      	ldr	r4, [pc, #52]	; (8003114 <__libc_init_array+0x3c>)
 80030e0:	1b64      	subs	r4, r4, r5
 80030e2:	10a4      	asrs	r4, r4, #2
 80030e4:	42a6      	cmp	r6, r4
 80030e6:	d109      	bne.n	80030fc <__libc_init_array+0x24>
 80030e8:	f000 f822 	bl	8003130 <_init>
 80030ec:	2600      	movs	r6, #0
 80030ee:	4d0a      	ldr	r5, [pc, #40]	; (8003118 <__libc_init_array+0x40>)
 80030f0:	4c0a      	ldr	r4, [pc, #40]	; (800311c <__libc_init_array+0x44>)
 80030f2:	1b64      	subs	r4, r4, r5
 80030f4:	10a4      	asrs	r4, r4, #2
 80030f6:	42a6      	cmp	r6, r4
 80030f8:	d105      	bne.n	8003106 <__libc_init_array+0x2e>
 80030fa:	bd70      	pop	{r4, r5, r6, pc}
 80030fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003100:	4798      	blx	r3
 8003102:	3601      	adds	r6, #1
 8003104:	e7ee      	b.n	80030e4 <__libc_init_array+0xc>
 8003106:	f855 3b04 	ldr.w	r3, [r5], #4
 800310a:	4798      	blx	r3
 800310c:	3601      	adds	r6, #1
 800310e:	e7f2      	b.n	80030f6 <__libc_init_array+0x1e>
 8003110:	08003174 	.word	0x08003174
 8003114:	08003174 	.word	0x08003174
 8003118:	08003174 	.word	0x08003174
 800311c:	08003178 	.word	0x08003178

08003120 <memset>:
 8003120:	4603      	mov	r3, r0
 8003122:	4402      	add	r2, r0
 8003124:	4293      	cmp	r3, r2
 8003126:	d100      	bne.n	800312a <memset+0xa>
 8003128:	4770      	bx	lr
 800312a:	f803 1b01 	strb.w	r1, [r3], #1
 800312e:	e7f9      	b.n	8003124 <memset+0x4>

08003130 <_init>:
 8003130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003132:	bf00      	nop
 8003134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003136:	bc08      	pop	{r3}
 8003138:	469e      	mov	lr, r3
 800313a:	4770      	bx	lr

0800313c <_fini>:
 800313c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313e:	bf00      	nop
 8003140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003142:	bc08      	pop	{r3}
 8003144:	469e      	mov	lr, r3
 8003146:	4770      	bx	lr
